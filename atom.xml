<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>GOYTH</title>
  
  <subtitle>记录学习的技能和遇到的问题</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.goyth.com/"/>
  <updated>2018-05-28T14:11:34.465Z</updated>
  <id>http://www.goyth.com/</id>
  
  <author>
    <name>Luke Hu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript之apply、call和bind的模拟实现</title>
    <link href="http://www.goyth.com/2018/05/27/applyAndCall/"/>
    <id>http://www.goyth.com/2018/05/27/applyAndCall/</id>
    <published>2018-05-27T09:25:50.000Z</published>
    <updated>2018-05-28T14:11:34.465Z</updated>
    
    <content type="html"><![CDATA[<h2 id="apply"><a href="#apply" class="headerlink" title="apply()"></a>apply()</h2><p>apply 方法传入两个参数：一个是作为函数上下文的对象，另外一个是作为函数参数所组成的数组。当第一个参数为 <code>null</code> 时，函数上下文为 <code>window</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name : <span class="string">'luke'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">age, gender</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">' '</span> + age + <span class="string">' '</span> + gender);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func.apply(obj, [<span class="number">18</span>, <span class="string">'male'</span>]);    <span class="comment">// luke 18 male</span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="apply模拟实现"><a href="#apply模拟实现" class="headerlink" title="apply模拟实现"></a>apply模拟实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.apply2 = <span class="function"><span class="keyword">function</span>(<span class="params">context, arrArgs</span>)</span>&#123;</span><br><span class="line">  context = context || <span class="built_in">window</span>;</span><br><span class="line">  context.fn = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">let</span> args = [];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>, len=arrArgs.length; i&lt;len; i++)&#123;</span><br><span class="line">    args.push(<span class="string">'arrArgs['</span>+i+<span class="string">']'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="built_in">eval</span>(<span class="string">'context.fn('</span>+args+<span class="string">')'</span>);</span><br><span class="line">  <span class="keyword">delete</span> context.fn;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试一下</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name : <span class="string">'luke'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">age, gender</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">' '</span> + age + <span class="string">' '</span> + gender);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func.apply2(obj, [<span class="number">18</span>, <span class="string">'male'</span>]);    <span class="comment">// luke 18 male</span></span><br></pre></td></tr></table></figure><h2 id="call"><a href="#call" class="headerlink" title="call()"></a>call()</h2><p>call 方法第一个参数也是作为函数上下文的对象，但是后面传入的是一个参数列表，而不是单个数组。当第一个参数为 <code>null</code> 时，函数上下文也是 <code>window</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name : <span class="string">'luke'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">age, gender</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">' '</span> + age + <span class="string">' '</span> + gender);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func.call(obj, <span class="number">18</span>, <span class="string">'male'</span>);    <span class="comment">// luke 18 male</span></span><br></pre></td></tr></table></figure><h2 id="call模拟实现"><a href="#call模拟实现" class="headerlink" title="call模拟实现"></a>call模拟实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.call2 = <span class="function"><span class="keyword">function</span>(<span class="params">context</span>)</span>&#123;</span><br><span class="line">  context = context || <span class="built_in">window</span>;</span><br><span class="line">  context.fn = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">let</span> args = [];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>, len=<span class="built_in">arguments</span>.length; i&lt;len; i++)&#123;</span><br><span class="line">    args.push(<span class="string">'arguments['</span>+i+<span class="string">']'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="built_in">eval</span>(<span class="string">'context.fn('</span>+args+<span class="string">')'</span>);</span><br><span class="line">  <span class="keyword">delete</span> context.fn;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试一下</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name : <span class="string">'luke'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">age, gender</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">' '</span> + age + <span class="string">' '</span> + gender);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func.call2(obj, <span class="number">18</span>, <span class="string">'male'</span>);    <span class="comment">// luke 18 male</span></span><br></pre></td></tr></table></figure><h2 id="bind"><a href="#bind" class="headerlink" title="bind()"></a>bind()</h2><p>bind() 方法会创建一个新函数。当这个新函数被调用时，bind() 的第一个参数将作为它运行时的 this，之后的一序列参数将会在传递的实参前传入作为它的参数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name : <span class="string">'luke'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">age, gender</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">' '</span> + age + <span class="string">' '</span> + gender);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bindfn = func.bind(obj, <span class="number">18</span>);</span><br><span class="line">bindfn(<span class="string">'male'</span>)    <span class="comment">// luke 18 male</span></span><br></pre></td></tr></table></figure><h2 id="bind模拟实现"><a href="#bind模拟实现" class="headerlink" title="bind模拟实现"></a>bind模拟实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.bind2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> context = [].shift.call(<span class="built_in">arguments</span>) || <span class="built_in">window</span>;</span><br><span class="line">  <span class="keyword">let</span> args = [].slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">  <span class="keyword">let</span> self = <span class="keyword">this</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Bd</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> self.apply(<span class="keyword">this</span> <span class="keyword">instanceof</span> Bd ? <span class="keyword">this</span> : context, args.concat([].slice.call(<span class="built_in">arguments</span>)));</span><br><span class="line">  &#125;</span><br><span class="line">  Bd.prototype = <span class="built_in">Object</span>.create(self.prototype);</span><br><span class="line">  <span class="keyword">return</span> Bd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试一下</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name : <span class="string">'luke'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">age, gender</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">' '</span> + age + <span class="string">' '</span> + gender);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bindfn = func.bind2(obj, <span class="number">18</span>);</span><br><span class="line">bindfn(<span class="string">'male'</span>)    <span class="comment">// luke 18 male</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;apply&quot;&gt;&lt;a href=&quot;#apply&quot; class=&quot;headerlink&quot; title=&quot;apply()&quot;&gt;&lt;/a&gt;apply()&lt;/h2&gt;&lt;p&gt;apply 方法传入两个参数：一个是作为函数上下文的对象，另外一个是作为函数参数所组成的数组。当第一个参数为 &lt;code&gt;null&lt;/code&gt; 时，函数上下文为 &lt;code&gt;window&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    name : &lt;span class=&quot;string&quot;&gt;&#39;luke&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;func&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;age, gender&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name + &lt;span class=&quot;string&quot;&gt;&#39; &#39;&lt;/span&gt; + age + &lt;span class=&quot;string&quot;&gt;&#39; &#39;&lt;/span&gt; + gender);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func.apply(obj, [&lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;male&#39;&lt;/span&gt;]);    &lt;span class=&quot;comment&quot;&gt;// luke 18 male&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.goyth.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://www.goyth.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>浏览器渲染之回流（Reflow）与重绘（Repaint）</title>
    <link href="http://www.goyth.com/2018/05/25/reflowAndRepaint/"/>
    <id>http://www.goyth.com/2018/05/25/reflowAndRepaint/</id>
    <published>2018-05-25T10:39:42.000Z</published>
    <updated>2018-05-28T14:15:46.565Z</updated>
    
    <content type="html"><![CDATA[<h2 id="浏览器渲染流程"><a href="#浏览器渲染流程" class="headerlink" title="浏览器渲染流程"></a>浏览器渲染流程</h2><p>浏览器渲染流程如下图所示：</p><p><img src="/2018/05/25/reflowAndRepaint/webkitflow.png" alt=""></p><p>大概可以划分成以下几个步骤：</p><ol><li>通过HTML解析器解析HTML文本并构建DOM tree</li><li>通过CSS解析器解析CSS样式表并构建CSSOM tree</li><li>根据DOM tree 和 CSSOM tree 构建 Render tree</li><li>Render tree 刚构建完后是没有元素节点坐标、尺寸大小等信息的，此时需要通过Reflow(Layout)进行布局处理，计算出元素在屏幕上显示的位置，尺寸大小等信息。</li><li>遍历渲染树，对每一个元素节点进行绘制（Painting）</li></ol><p>回流（Reflow）与重绘（Repaint）就分别发生在第四步和第五步</p><a id="more"></a><h2 id="回流（Reflow）和重绘（Repaint）的定义"><a href="#回流（Reflow）和重绘（Repaint）的定义" class="headerlink" title="回流（Reflow）和重绘（Repaint）的定义"></a>回流（Reflow）和重绘（Repaint）的定义</h2><h3 id="回流（Reflow）"><a href="#回流（Reflow）" class="headerlink" title="回流（Reflow）"></a>回流（Reflow）</h3><p>对于DOM结构中的各个元素都有自己的盒子（模型），这些都需要浏览器根据各种样式（浏览器的、开发人员定义的等）来计算，并根据计算结果将元素放到它该出现的位置，这个过程称之为reflow。</p><h3 id="重绘（Repaint）"><a href="#重绘（Repaint）" class="headerlink" title="重绘（Repaint）"></a>重绘（Repaint）</h3><p>当各种盒子的位置、大小以及其他属性，例如颜色、字体大小等都确定下来后，浏览器于是便把这些元素都按照各自的特性绘制了一遍，于是页面的内容出现了，这个过程称之为 repaint。</p><blockquote><p>回流（Reflow）和重绘（Repaint）会对性能产生一定的影响，尤其是当引发全局的回流和重绘时。</p></blockquote><h2 id="导致回流（Reflow）和重绘（Repaint）的操作"><a href="#导致回流（Reflow）和重绘（Repaint）的操作" class="headerlink" title="导致回流（Reflow）和重绘（Repaint）的操作"></a>导致回流（Reflow）和重绘（Repaint）的操作</h2><ol><li>调整窗口大小</li><li>改变字体</li><li>增加或者移除样式表</li><li>内容变化，比如用户在input框中输入文字</li><li>激活 CSS 伪类，比如 :hover (IE 中为兄弟结点伪类的激活)</li><li>操作 class 属性</li><li>脚本操作 DOM</li><li>计算 offsetWidth 和 offsetHeight 属性</li><li>设置 style 属性的值 </li></ol><h2 id="如何尽量避免回流（Reflow）和重绘（Repaint）"><a href="#如何尽量避免回流（Reflow）和重绘（Repaint）" class="headerlink" title="如何尽量避免回流（Reflow）和重绘（Repaint）"></a>如何尽量避免回流（Reflow）和重绘（Repaint）</h2><ol><li><p>不要一条一条地修改 DOM 的样式。与其这样，还不如预先定义好 css 的 class，然后修改 DOM 的 className，即将多次改变样式属性的操作合并成一次操作：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不好的写法</span></span><br><span class="line"><span class="keyword">var</span> left = <span class="number">10</span>,</span><br><span class="line">top = <span class="number">10</span>;</span><br><span class="line">el.style.left = left + <span class="string">"px"</span>;</span><br><span class="line">el.style.top  = top  + <span class="string">"px"</span>;</span><br><span class="line">el.style.background = <span class="string">'#eee'</span>; </span><br><span class="line"><span class="comment">// 比较好的写法</span></span><br><span class="line">el.className += <span class="string">" theclassname"</span>;</span><br></pre></td></tr></table></figure></li><li><p>让要操作的元素进行”离线处理”，处理完后一起更新 </p></li></ol><ul><li>使用documentFragment对象进行缓存操作,引发一次回流和重绘； </li><li>使用display:none技术，只引发两次回流和重绘。原理：由于display属性为none的元素不在渲染树中，对隐藏的元素操 作不会引发其他元素的重排。如果要对一个元素进行复杂的操作时，可以先隐藏它，操作完成后再显示。这样只在隐藏和显示时触发2次重排。 </li><li>先克隆Dom节点(cloneNode) 修改完后，再用克隆的Dom节点将原来的节点替换掉，只引发一次回流和重绘； </li></ul><ol><li>将需要多次重排的元素，position属性设为absolute或fixed，这样此元素就脱离了文档流，它的变化不会影响到其他元素为动画的 HTML 元素，例如动画，那么修改他们的 CSS 是会大大减小 reflow 。因为,它们不影响其他元素的布局，所它他们只会导致重新绘制，而不是一个完整回流。这样消耗会更低</li><li>不要用tables布局的一个原因就是tables中某个元素一旦触发reflow就会导致table里所有的其它元素reflow。在适合用table的场合，可以设置table-layout为auto或fixed，这样可以让table一行一行的渲染，这种做法也是为了限制reflow的影响范围。</li><li>尽可能的修改层级比较低的 DOM节点。当然，改变层级比较底的 DOM节点有可能会造成大面积的 reflow，但是也可能影响范围很小。<br>因为改变 DOM 树中的一级会导致所有层级的改变，上至根部，下至被改变节点的子节点。这导致大量时间耗费在执行 reflow 上面 </li><li>不要把 DOM 节点的属性值放在一个循环里当成循环里的变量。不然这会导致大量地读写这个结点的属性。</li><li>避免使用CSS的JavaScript表达式，如果css里有expression，每次都会重新计算一遍。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;浏览器渲染流程&quot;&gt;&lt;a href=&quot;#浏览器渲染流程&quot; class=&quot;headerlink&quot; title=&quot;浏览器渲染流程&quot;&gt;&lt;/a&gt;浏览器渲染流程&lt;/h2&gt;&lt;p&gt;浏览器渲染流程如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2018/05/25/reflowAndRepaint/webkitflow.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;大概可以划分成以下几个步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通过HTML解析器解析HTML文本并构建DOM tree&lt;/li&gt;
&lt;li&gt;通过CSS解析器解析CSS样式表并构建CSSOM tree&lt;/li&gt;
&lt;li&gt;根据DOM tree 和 CSSOM tree 构建 Render tree&lt;/li&gt;
&lt;li&gt;Render tree 刚构建完后是没有元素节点坐标、尺寸大小等信息的，此时需要通过Reflow(Layout)进行布局处理，计算出元素在屏幕上显示的位置，尺寸大小等信息。&lt;/li&gt;
&lt;li&gt;遍历渲染树，对每一个元素节点进行绘制（Painting）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;回流（Reflow）与重绘（Repaint）就分别发生在第四步和第五步&lt;/p&gt;
    
    </summary>
    
      <category term="Browser" scheme="http://www.goyth.com/categories/Browser/"/>
    
    
      <category term="Reflow" scheme="http://www.goyth.com/tags/Reflow/"/>
    
      <category term="Repaint" scheme="http://www.goyth.com/tags/Repaint/"/>
    
  </entry>
  
  <entry>
    <title>N-Sum 问题</title>
    <link href="http://www.goyth.com/2018/05/25/nsum/"/>
    <id>http://www.goyth.com/2018/05/25/nsum/</id>
    <published>2018-05-25T09:26:18.000Z</published>
    <updated>2018-05-28T14:15:33.290Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>给定一个包含多个整数且排好序的数组 nums 和一个目标值 target，判断 nums 中是否存在 N(N&gt;1) 个元素，使得 N 个元素之和与 target 相等？找出所有满足条件且不重复的N元组。</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>通过递归降幂将 N-Sum问题 降幂到 2-Sum 问题，然后采用两边加逼的办法求解</p><a id="more"></a><h3 id="JavaScript-版本"><a href="#JavaScript-版本" class="headerlink" title="JavaScript 版本"></a>JavaScript 版本</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; target</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; n</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; result</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; results 结果集</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findNsum</span>(<span class="params">nums, target, n, result, results</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;<span class="number">2</span> || nums.length &lt; n || target &lt; nums[<span class="number">0</span>] * n || target &gt; nums[nums.length<span class="number">-1</span>] * n) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span>(n === <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> l = <span class="number">0</span>,</span><br><span class="line">            r = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l &lt; r)&#123;</span><br><span class="line">            <span class="keyword">let</span> s = nums[l] + nums[r];</span><br><span class="line">            <span class="keyword">if</span>(s == target)&#123;</span><br><span class="line">                results.push(result.concat(nums[l], nums[r]));</span><br><span class="line">                l++;</span><br><span class="line">                r--;</span><br><span class="line">                <span class="keyword">while</span>(l &lt; r &amp;&amp; nums[l] == nums[l<span class="number">-1</span>])&#123;</span><br><span class="line">                    l++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span>(l&lt;r &amp;&amp; nums[r] == nums[r+<span class="number">1</span>])&#123;</span><br><span class="line">                    r--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(s &lt; target)&#123;</span><br><span class="line">                l++;</span><br><span class="line">                <span class="keyword">while</span>(l &lt; r &amp;&amp; nums[l] == nums[l<span class="number">-1</span>])&#123;</span><br><span class="line">                    l++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                r--;</span><br><span class="line">                <span class="keyword">while</span>(l&lt;r &amp;&amp; nums[r] == nums[r+<span class="number">1</span>])&#123;</span><br><span class="line">                    r--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> len = nums.length - n + <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span> ; i &lt; len; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">0</span> || ( i&gt;<span class="number">0</span> &amp;&amp; nums[i] != nums[i - <span class="number">1</span>]))&#123;</span><br><span class="line">                findNsum(nums.slice(i+<span class="number">1</span>), target - nums[i], n - <span class="number">1</span>, result.concat(nums[i]), results);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Python-版本"><a href="#Python-版本" class="headerlink" title="Python 版本"></a>Python 版本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findNsum</span><span class="params">(nums, target, N, result, results)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(nums) &lt; N <span class="keyword">or</span> N &lt; <span class="number">2</span> <span class="keyword">or</span> target &lt; nums[<span class="number">0</span>]*N <span class="keyword">or</span> target &gt; nums[<span class="number">-1</span>]*N:  <span class="comment"># early termination</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> N == <span class="number">2</span>: <span class="comment"># two pointers solve sorted 2-sum problem</span></span><br><span class="line">        l,r = <span class="number">0</span>,len(nums)<span class="number">-1</span></span><br><span class="line">        <span class="keyword">while</span> l &lt; r:</span><br><span class="line">            s = nums[l] + nums[r]</span><br><span class="line">            <span class="keyword">if</span> s == target:</span><br><span class="line">                results.append(result + [nums[l], nums[r]])</span><br><span class="line">                l += <span class="number">1</span></span><br><span class="line">                r -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">while</span> l &lt; r <span class="keyword">and</span> nums[l] == nums[l<span class="number">-1</span>]:</span><br><span class="line">                    l += <span class="number">1</span></span><br><span class="line">                <span class="keyword">while</span> l &lt; r <span class="keyword">and</span> nums[r] == nums[r+<span class="number">1</span>]:</span><br><span class="line">                    r -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> s &lt; target:</span><br><span class="line">                l += <span class="number">1</span></span><br><span class="line">                <span class="keyword">while</span> l &lt; r <span class="keyword">and</span> nums[l] == nums[l<span class="number">-1</span>]:</span><br><span class="line">                    l += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                r -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">while</span> l &lt; r <span class="keyword">and</span> nums[r] == nums[r+<span class="number">1</span>]:</span><br><span class="line">                    r -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>: <span class="comment"># recursively reduce N</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)-N+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> i == <span class="number">0</span> <span class="keyword">or</span> (i &gt; <span class="number">0</span> <span class="keyword">and</span> nums[i<span class="number">-1</span>] != nums[i]):</span><br><span class="line">                findNsum(nums[i+<span class="number">1</span>:], target-nums[i], N<span class="number">-1</span>, result+[nums[i]], results)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;给定一个包含多个整数且排好序的数组 nums 和一个目标值 target，判断 nums 中是否存在 N(N&amp;gt;1) 个元素，使得 N 个元素之和与 target 相等？找出所有满足条件且不重复的N元组。&lt;/p&gt;
&lt;h3 id=&quot;解题思路&quot;&gt;&lt;a href=&quot;#解题思路&quot; class=&quot;headerlink&quot; title=&quot;解题思路&quot;&gt;&lt;/a&gt;解题思路&lt;/h3&gt;&lt;p&gt;通过递归降幂将 N-Sum问题 降幂到 2-Sum 问题，然后采用两边加逼的办法求解&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="http://www.goyth.com/categories/Algorithm/"/>
    
    
      <category term="Sort" scheme="http://www.goyth.com/tags/Sort/"/>
    
  </entry>
  
  <entry>
    <title>浏览器页面渲染流程梳理</title>
    <link href="http://www.goyth.com/2018/05/23/browserRendering/"/>
    <id>http://www.goyth.com/2018/05/23/browserRendering/</id>
    <published>2018-05-23T09:14:52.000Z</published>
    <updated>2018-05-28T14:11:44.270Z</updated>
    
    <content type="html"><![CDATA[<h2 id="浏览器渲染基本流程"><a href="#浏览器渲染基本流程" class="headerlink" title="浏览器渲染基本流程"></a>浏览器渲染基本流程</h2><p>浏览器渲染流程如下图所示：</p><p><img src="/2018/05/23/browserRendering/webkitflow.png" alt=""><br><em>图片来源：<a href="https://www.html5rocks.com/en/tutorials/internals/howbrowserswork/" target="_blank" rel="noopener">https://www.html5rocks.com/en/tutorials/internals/howbrowserswork/</a></em></p><p>大概可以划分成以下几个步骤：</p><ol><li>通过HTML解析器解析HTML文本并构建DOM tree</li><li>通过CSS解析器解析CSS样式表并构建CSSOM tree</li><li>根据DOM tree 和 CSSOM tree 构建 Render tree</li><li>Render tree 刚构建完后是没有元素节点坐标、尺寸大小等信息的，此时需要通过Layout(Reflow)进行布局处理，计算出元素在屏幕上显示的位置，尺寸大小等信息。</li><li>遍历渲染树，对每一个元素节点进行绘制（Painting）</li></ol><a id="more"></a><h3 id="解析（Parsing）"><a href="#解析（Parsing）" class="headerlink" title="解析（Parsing）"></a>解析（Parsing）</h3><p>解析的过程分为两个步骤：词法分析和语法分析。<br>词法分析负责将输入内容分解成一个个有效标记；而语法分析负责根据语言的语法规则分析文档的结构，从而构建解析树。通过词法分析可以将无关的字符（比如空格和换行符）分离出来。</p><div align="center"><br> <img src="/2018/05/23/browserRendering/parsing.png" alt="从源文档到解析树" align="center"><br></div><br><div align="center"><br><em>图：从源文档到解析树</em><br></div><p>解析是一个迭代的过程。通常，解析器会向词法分析器请求一个新标记，并尝试将其与某条语法规则进行匹配。如果发现了匹配规则，解析器会将一个对应于该标记的节点添加到解析树中，然后继续请求下一个标记。</p><p>如果没有规则可以匹配，解析器就会将标记存储到内部，并继续请求标记，直至找到可与所有内部存储的标记匹配的规则。如果找不到任何匹配规则，解析器就会引发一个异常。这意味着文档无效，包含语法错误。</p><h3 id="转译-Translation"><a href="#转译-Translation" class="headerlink" title="转译(Translation)"></a>转译(Translation)</h3><p>很多时候，解析树还不是最终产品。解析通常是在转译过程中使用的，而转译是指将输入文档转换成另一种格式。编译就是这样一个例子。编译器可将源代码编译成机器代码，具体过程是首先将源代码解析成解析树，然后将解析树翻译成机器代码文档。</p><div align="center"><br> <img src="/2018/05/23/browserRendering/translate.png" alt="编译流程" align="center"><br></div><br><div align="center"><br><em>图：编译流程</em><br></div><h3 id="HTML解析"><a href="#HTML解析" class="headerlink" title="HTML解析"></a>HTML解析</h3><p>解析器的输出“解析树”是由 DOM 元素和属性节点构成的树结构。DOM 是文档对象模型 (Document Object Model) 的缩写。它是 HTML 文档的对象表示，同时也是外部内容（例如 JavaScript）与 HTML 元素之间的接口。<br>解析树的根节点是“<a href="https://www.w3.org/TR/1998/REC-DOM-Level-1-19981001/level-one-core.html#i-Document" target="_blank" rel="noopener">Document</a>”对象。</p><p>DOM 与标记之间几乎是一一对应的关系。比如下面这段标记：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">      Hello World</span><br><span class="line">    &lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div&gt; &lt;img src="example.png"/</span>&gt;&lt;/div&gt;</span><br><span class="line">  &lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure></p><p>可翻译成如下的 DOM 树：</p><div align="center"><br> <img src="/2018/05/23/browserRendering/domtree.png" alt="示例标记的 DOM 树" align="center"><br></div><br><div align="center"><br><em>图：示例标记的 DOM 树</em><br></div><h5 id="解析算法"><a href="#解析算法" class="headerlink" title="解析算法"></a>解析算法</h5><p><a href="https://html.spec.whatwg.org/multipage/parsing.html" target="_blank" rel="noopener">HTML5 规范详细地描述了解析算法</a>。此算法由两个阶段组成：标记化和树构建。</p><p>标记化是词法分析过程，将输入内容解析成多个标记。HTML 标记包括起始标记、结束标记、属性名称和属性值。</p><p>标记生成器识别标记，传递给树构造器，然后接受下一个字符以识别下一个标记；如此反复直到输入的结束。</p><div align="center"><br> <img src="/2018/05/23/browserRendering/htmlparse.png" alt="HTML 解析流程（摘自 HTML5 规范）" align="center"><br></div><br><div align="center"><br><em>图：HTML 解析流程（摘自 HTML5 规范）</em><br></div><h3 id="CSS解析"><a href="#CSS解析" class="headerlink" title="CSS解析"></a>CSS解析</h3><p>和 HTML 不同，CSS 是上下文无关的语法。事实上，<a href="https://www.w3.org/TR/CSS2/grammar.html" target="_blank" rel="noopener">CSS 规范定义了 CSS 的词法和语法</a>。</p><p>WebKit 使用 Flex 和 Bison 解析器生成器，通过 CSS 语法文件自动创建解析器。Bison 会创建自下而上的移位归约解析器。Firefox 使用的是人工编写的自上而下的解析器。这两种解析器都会将 CSS 文件解析成 StyleSheet 对象，且每个对象都包含 CSS 规则。CSS 规则对象则包含选择器和声明对象，以及其他与 CSS 语法对应的对象。</p><div align="center"><br> <img src="/2018/05/23/browserRendering/cssparse.png" alt="解析 CSS" align="center"><br></div><br><div align="center"><br><em>图：解析 CSS</em><br></div><h3 id="处理脚本和样式表的顺序"><a href="#处理脚本和样式表的顺序" class="headerlink" title="处理脚本和样式表的顺序"></a>处理脚本和样式表的顺序</h3><h4 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h4><p>网络的模型是同步的。网页解析器遇到 <code>&lt;script&gt;</code> 标记时文档的解析将停止，直到脚本执行完毕。如果脚本是外部的，那么解析过程会停止，直到从网络同步抓取资源完成后再继续。你可以在<code>&lt;script&gt;</code> 标签上添加“defer”属性（<code>&lt;script defer&gt;</code>），这样它就不会停止文档解析，而是等到解析结束才执行。HTML5 增加了一个async属性，可将脚本标记为异步<code>&lt;script async&gt;</code>），以便由其他线程解析和执行。</p><h4 id="预解析"><a href="#预解析" class="headerlink" title="预解析"></a>预解析</h4><p>WebKit 和 Firefox 都进行了这项优化。在执行脚本时，其他线程会解析文档的其余部分，找出并加载需要通过网络加载的其他资源。通过这种方式，资源可以在并行连接上加载，从而提高总体速度。请注意，预解析器不会修改 DOM 树，而是将这项工作交由主解析器处理；预解析器只会解析外部资源（例如外部脚本、样式表和图片）的引用。</p><h4 id="样式表"><a href="#样式表" class="headerlink" title="样式表"></a>样式表</h4><p>另一方面，样式表有着不同的模型。理论上来说，应用样式表不会更改 DOM 树，因此似乎没有必要等待样式表并停止文档解析。但这涉及到一个问题，就是脚本在文档解析阶段会请求样式信息。如果当时还没有加载和解析样式，脚本就会获得错误的回复，这样显然会产生很多问题。这看上去是一个非典型案例，但事实上非常普遍。Firefox 在样式表加载和解析的过程中，会禁止所有脚本。而对于 WebKit 而言，仅当脚本尝试访问的样式属性可能受尚未加载的样式表影响时，它才会禁止该脚本。</p><h3 id="Render-tree构建"><a href="#Render-tree构建" class="headerlink" title="Render tree构建"></a>Render tree构建</h3><div align="center"><br> <img src="/2018/05/23/browserRendering/render-tree-construction.png" alt="Render tree构建" align="center"><br></div><br><div align="center"><br><em>图：Render tree构建</em><br></div><p>Render tree是由 DOM 和 CSSOM 组合构建而成的。也是页面可视化元素按照其显示顺序而组成的树，是文档的可视化表示。它的作用是让浏览器按照正确的顺序绘制内容。</p><p>Firefox 将Render tree中的元素称为“框架”。WebKit 使用的术语是呈现器或呈现对象。<br>呈现器知道如何布局并将自身及其子元素绘制出来。 </p><h4 id="呈现树和-DOM-树的关系"><a href="#呈现树和-DOM-树的关系" class="headerlink" title="呈现树和 DOM 树的关系"></a>呈现树和 DOM 树的关系</h4><p>呈现器是和 DOM 元素相对应的，但并非一一对应。非可视化的 DOM 元素不会插入呈现树中，例如“head”元素。如果元素的 display 属性值为“none”，那么也不会显示在呈现树中（但是 visibility 属性值为“hidden”的元素仍会显示）。<br>有一些 DOM 元素对应多个可视化对象。它们往往是具有复杂结构的元素，无法用单一的矩形来描述。例如，“select”元素有 3 个呈现器：一个用于显示区域，一个用于下拉列表框，还有一个用于按钮。如果由于宽度不够，文本无法在一行中显示而分为多行，那么新的行也会作为新的呈现器而添加。<br>另一个关于多呈现器的例子是格式无效的 HTML。根据 CSS 规范，inline 元素只能包含 block 元素或 inline 元素中的一种。如果出现了混合内容，则应创建匿名的 block 呈现器，以包裹 inline 元素。</p><p>有一些呈现对象对应于 DOM 节点，但在树中所在的位置与 DOM 节点不同。浮动定位和绝对定位的元素就是这样，它们处于正常的流程之外，放置在树中的其他地方，并映射到真正的框架，而放在原位的是占位框架。</p><div align="center"><br> <img src="/2018/05/23/browserRendering/render&dom.png" alt="呈现树及其对应的 DOM 树" align="center"><br></div><br><div align="center"><br><em>图：呈现树及其对应的 DOM 树</em><br></div><h3 id="布局（Layout-Reflow）"><a href="#布局（Layout-Reflow）" class="headerlink" title="布局（Layout/Reflow）"></a>布局（Layout/Reflow）</h3><p>当Render Tree刚构建完时，并不包含元素节点的位置和大小信息。计算这些值的过程称为布局或重排。</p><p>HTML 采用基于流的布局模型，这意味着大多数情况下只要一次遍历就能计算出几何信息。处于流中靠后位置元素通常不会影响靠前位置元素的几何特征，因此布局可以按从左至右、从上至下的顺序遍历文档。但是也有例外情况，比如 HTML 表格的计算就需要不止一次的遍历。</p><p>坐标系是相对于根框架而建立的，使用的是上坐标和左坐标。</p><p>布局是一个递归的过程。它从根呈现器（对应于 HTML 文档的 <html> 元素）开始，然后递归遍历部分或所有的框架层次结构，为每一个需要计算的呈现器计算几何信息。</html></p><p>根呈现器的位置左边是 0,0，其尺寸为视口（也就是浏览器窗口的可见区域）。<br>所有的呈现器都有一个“layout”或者“reflow”方法，每一个呈现器都会调用其需要进行布局的子代的 layout 方法。</p><h4 id="Dirty-位系统"><a href="#Dirty-位系统" class="headerlink" title="Dirty 位系统"></a>Dirty 位系统</h4><p>为避免对所有细小更改都进行整体布局，浏览器采用了一种“dirty 位”系统。如果某个呈现器发生了更改，或者将自身及其子代标注为“dirty”，则需要进行布局。</p><p>有两种标记：“dirty”和“children are dirty”。“children are dirty”表示尽管呈现器自身没有变化，但它至少有一个子代需要布局。</p><h4 id="全局布局和增量布局"><a href="#全局布局和增量布局" class="headerlink" title="全局布局和增量布局"></a>全局布局和增量布局</h4><p>全局布局是指触发了整个呈现树范围的布局，触发原因可能包括：</p><ol><li>影响所有呈现器的全局样式更改，例如字体大小更改。</li><li>屏幕大小调整。</li></ol><p>布局可以采用增量方式，也就是只对 dirty 呈现器进行布局（这样可能存在需要进行额外布局的弊端）。<br>当呈现器为 dirty 时，会异步触发增量布局。例如，当来自网络的额外内容添加到 DOM 树之后，新的呈现器附加到了呈现树中。</p><div align="center"><br> <img src="/2018/05/23/browserRendering/reflow.png" alt="增量布局 - 只有 dirty 呈现器及其子代进行布局" align="center"><br></div><br><div align="center"><br><em>图：增量布局 - 只有 dirty 呈现器及其子代进行布局</em><br></div><h3 id="绘制"><a href="#绘制" class="headerlink" title="绘制"></a>绘制</h3><p>在绘制阶段，系统会遍历呈现树，并调用呈现器的“paint”方法，将呈现器的内容显示在屏幕上。绘制工作是使用用户界面基础组件完成的。</p><h4 id="全局绘制和增量绘制"><a href="#全局绘制和增量绘制" class="headerlink" title="全局绘制和增量绘制"></a>全局绘制和增量绘制</h4><p>和布局一样，绘制也分为全局（绘制整个呈现树）和增量两种。在增量绘制中，部分呈现器发生了更改，但是不会影响整个树。更改后的呈现器将其在屏幕上对应的矩形区域设为无效，这导致 OS 将其视为一块“dirty 区域”，并生成“paint”事件。OS 会很巧妙地将多个区域合并成一个。在 Chrome 浏览器中，情况要更复杂一些，因为 Chrome 浏览器的呈现器不在主进程上。Chrome 浏览器会在某种程度上模拟 OS 的行为。展示层会侦听这些事件，并将消息委托给呈现根节点。然后遍历呈现树，直到找到相关的呈现器，该呈现器会重新绘制自己（通常也包括其子代）。</p><h4 id="绘制顺序"><a href="#绘制顺序" class="headerlink" title="绘制顺序"></a>绘制顺序</h4><p><a href="https://www.w3.org/TR/CSS21/zindex.html" target="_blank" rel="noopener">CSS2 规范定义了绘制流程的顺序</a>。绘制的顺序其实就是元素进入堆栈样式上下文的顺序。这些堆栈会从后往前绘制，因此这样的顺序会影响绘制。块呈现器的堆栈顺序如下：</p><ol><li>背景颜色</li><li>背景图片</li><li>边框</li><li>子代</li><li>轮廓</li></ol><h4 id="WebKit-矩形存储"><a href="#WebKit-矩形存储" class="headerlink" title="WebKit 矩形存储"></a>WebKit 矩形存储</h4><p>在重新绘制之前，WebKit 会将原来的矩形另存为一张位图(Bitmap)，然后只绘制新旧矩形之间的差异部分。</p><h4 id="动态变化"><a href="#动态变化" class="headerlink" title="动态变化"></a>动态变化</h4><p>在发生变化时，浏览器会尽可能做出最小的响应。因此，元素的颜色改变后，只会对该元素进行重绘。元素的位置改变后，只会对该元素及其子元素（可能还有同级元素）进行布局和重绘。添加 DOM 节点后，会对该节点进行布局和重绘。一些重大变化（例如增大“html”元素的字体）会导致缓存无效，使得整个呈现树都会进行重新布局和绘制。</p><p>参考链接</p><ul><li><a href="https://www.html5rocks.com/en/tutorials/internals/howbrowserswork/" target="_blank" rel="noopener">https://www.html5rocks.com/en/tutorials/internals/howbrowserswork/</a></li><li><a href="https://www.youtube.com/watch?v=SmE4OwHztCc" target="_blank" rel="noopener">https://www.youtube.com/watch?v=SmE4OwHztCc</a></li><li><a href="https://www.youtube.com/watch?v=0IsQqJ7pwhw" target="_blank" rel="noopener">https://www.youtube.com/watch?v=0IsQqJ7pwhw</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;浏览器渲染基本流程&quot;&gt;&lt;a href=&quot;#浏览器渲染基本流程&quot; class=&quot;headerlink&quot; title=&quot;浏览器渲染基本流程&quot;&gt;&lt;/a&gt;浏览器渲染基本流程&lt;/h2&gt;&lt;p&gt;浏览器渲染流程如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2018/05/23/browserRendering/webkitflow.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;em&gt;图片来源：&lt;a href=&quot;https://www.html5rocks.com/en/tutorials/internals/howbrowserswork/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.html5rocks.com/en/tutorials/internals/howbrowserswork/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;大概可以划分成以下几个步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通过HTML解析器解析HTML文本并构建DOM tree&lt;/li&gt;
&lt;li&gt;通过CSS解析器解析CSS样式表并构建CSSOM tree&lt;/li&gt;
&lt;li&gt;根据DOM tree 和 CSSOM tree 构建 Render tree&lt;/li&gt;
&lt;li&gt;Render tree 刚构建完后是没有元素节点坐标、尺寸大小等信息的，此时需要通过Layout(Reflow)进行布局处理，计算出元素在屏幕上显示的位置，尺寸大小等信息。&lt;/li&gt;
&lt;li&gt;遍历渲染树，对每一个元素节点进行绘制（Painting）&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Browser" scheme="http://www.goyth.com/categories/Browser/"/>
    
    
      <category term="Browser rendering" scheme="http://www.goyth.com/tags/Browser-rendering/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript之函数防抖与节流</title>
    <link href="http://www.goyth.com/2018/05/10/debounceAndThrottle/"/>
    <id>http://www.goyth.com/2018/05/10/debounceAndThrottle/</id>
    <published>2018-05-10T08:31:07.000Z</published>
    <updated>2018-05-28T14:12:44.320Z</updated>
    
    <content type="html"><![CDATA[<h2 id="函数防抖（debounce"><a href="#函数防抖（debounce" class="headerlink" title="函数防抖（debounce)"></a>函数防抖（debounce)</h2><p>函数防抖是指在函数调用动作触发n秒后才开始执行，n秒内若再次触发，则重新开始计时，再次等待n秒后才开始执行。如果n秒内不断触发，那就不断重新开始计时，一直等到有一个n秒内没有触发，才开始执行此函数。</p><p>根据描述，我们可以用<code>setTimeout</code>来实现一个简单版的防抖函数</p><a id="more"></a><h3 id="第一版"><a href="#第一版" class="headerlink" title="第一版"></a>第一版</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">／**</span><br><span class="line">* @ fn 回调函数 </span><br><span class="line">* @ delay 延迟时间 </span><br><span class="line">*／</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, delay</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        clearTimeout(timer);</span><br><span class="line">        timer = setTimeout(fn, delay);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- mo--><p>由于<code>setTimeout</code>的回调函数内的<code>this</code>是指向<code>window</code>，如果不传参数则<code>argument</code>对象为空，所以我们得修复<code>this</code>的指向，并将<code>argument</code>对象也传给回调函数</p><h3 id="第二版"><a href="#第二版" class="headerlink" title="第二版"></a>第二版</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">／**</span><br><span class="line">* @ fn 回调函数 </span><br><span class="line">* @ delay 延迟时间 </span><br><span class="line">*／</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, delay</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> context = <span class="keyword">this</span>,</span><br><span class="line">            arg = <span class="built_in">arguments</span>;</span><br><span class="line">        clearTimeout(timer);</span><br><span class="line">        timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            fn.apply(context, arg);</span><br><span class="line">        &#125;, delay);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我们新增一个立即执行的需求，就是第一次触发后就立即执行，然后再等待n秒后再执行，n秒内如果有触发则重新计时。我们新增一个参数immediate，true表示立即执行，false表示非立即执行</p><h3 id="第三版"><a href="#第三版" class="headerlink" title="第三版"></a>第三版</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">／**</span><br><span class="line">* @ fn 回调函数 </span><br><span class="line">* @ delay 延迟时间 </span><br><span class="line">* @ immediate 是否立即执行 </span><br><span class="line">*／</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, delay, immediate</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> context = <span class="keyword">this</span>,</span><br><span class="line">            arg = <span class="built_in">arguments</span>;</span><br><span class="line">        <span class="keyword">if</span>(timer)&#123;</span><br><span class="line">            clearTimeout(timer);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(immediate)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!timer)&#123;</span><br><span class="line">                fn.apply(context, arg);</span><br><span class="line">            &#125;</span><br><span class="line">            timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                timer = <span class="literal">null</span>;</span><br><span class="line">            &#125;, delay);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                fn.apply(context, arg);</span><br><span class="line">            &#125;, delay);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="underscore-实现版本："><a href="#underscore-实现版本：" class="headerlink" title="underscore 实现版本："></a>underscore 实现版本：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">_.debounce = <span class="function"><span class="keyword">function</span>(<span class="params">func, wait, immediate</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> timeout, args, context, timestamp, result;</span><br><span class="line">    <span class="keyword">var</span> later = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> last = _.now() - timestamp;</span><br><span class="line">        <span class="keyword">if</span> (last &lt; wait &amp;&amp; last &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            timeout = setTimeout(later, wait - last);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            timeout = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (!immediate) &#123;</span><br><span class="line">                result = func.apply(context, args);</span><br><span class="line">                <span class="keyword">if</span> (!timeout) context = args = <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        context = <span class="keyword">this</span>;</span><br><span class="line">        args = <span class="built_in">arguments</span>;</span><br><span class="line">        timestamp = _.now();</span><br><span class="line">        <span class="keyword">var</span> callNow = immediate &amp;&amp; !timeout;</span><br><span class="line">        <span class="keyword">if</span> (!timeout) timeout = setTimeout(later, wait);</span><br><span class="line">        <span class="keyword">if</span> (callNow) &#123;</span><br><span class="line">            result = func.apply(context, args);</span><br><span class="line">            context = args = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="函数节流（throttle）"><a href="#函数节流（throttle）" class="headerlink" title="函数节流（throttle）"></a>函数节流（throttle）</h2><p>函数节流是指每隔n秒钟就执行一次事件，不管你在n秒内触发了多少次事件，都是每隔n秒才执行一次。</p><p>可以用定时器和时间戳两种方式实现</p><h3 id="时间戳版本"><a href="#时间戳版本" class="headerlink" title="时间戳版本"></a>时间戳版本</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">／**</span><br><span class="line">* @ fn 回调函数 </span><br><span class="line">* @ wait 间隔时间 </span><br><span class="line">*／</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn, wait</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> pre = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> now = +<span class="keyword">new</span> Data();</span><br><span class="line">        <span class="keyword">let</span> remain = now - pre;</span><br><span class="line">        <span class="keyword">if</span>(remain &gt;= wait || remain &lt;= <span class="number">0</span> )&#123;</span><br><span class="line">            fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">            pre = now;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间戳版本，第一次会立即触发并执行回调函数，但是最后一次触发如果是在最后一个n秒内发生的，则最后一次触发并不会执行回调函数</p><h3 id="定时器版本"><a href="#定时器版本" class="headerlink" title="定时器版本"></a>定时器版本</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">／**</span><br><span class="line">* @ fn 回调函数 </span><br><span class="line">* @ wait 间隔时间 </span><br><span class="line">*／</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn, wait</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> context = <span class="keyword">this</span>,</span><br><span class="line">            arg = <span class="built_in">arguments</span>;</span><br><span class="line">        <span class="keyword">if</span>(!timer)&#123;</span><br><span class="line">            timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                fn.apply(context, arg);</span><br><span class="line">                timer = <span class="literal">null</span>;</span><br><span class="line">            &#125;, wait);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定时器版本第一次触发后会在n秒后再执行回调函数，最后一次触发如果是在最后一个n秒内发生，则最后一次触发也会执行回调函数</p><p>我们可以结合两个版本的优点实现一个首次会立即执行，最后一次也会执行的版本</p><h3 id="时间戳定时器混合版本"><a href="#时间戳定时器混合版本" class="headerlink" title="时间戳定时器混合版本"></a>时间戳定时器混合版本</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">／**</span><br><span class="line">* @ fn 回调函数 </span><br><span class="line">* @ wait 间隔时间 </span><br><span class="line">*／</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn, wait</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> pre = <span class="number">0</span>，</span><br><span class="line">        timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> context = <span class="keyword">this</span>,</span><br><span class="line">            arg = <span class="built_in">arguments</span>,</span><br><span class="line">            now = +<span class="keyword">new</span> Data(),</span><br><span class="line">            remaining = wait - (now - pre);</span><br><span class="line">        <span class="keyword">if</span>((remaining &lt; <span class="number">0</span> || remaining &gt;= wait))&#123;</span><br><span class="line">            <span class="keyword">if</span>(!timer)&#123;</span><br><span class="line">                fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">                pre = now;</span><br><span class="line">            &#125;</span><br><span class="line">            timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                pre = now;</span><br><span class="line">                fn.apply(context, arg);</span><br><span class="line">            &#125;, wait);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            clearTimeout(timer);</span><br><span class="line">            timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                pre = now;</span><br><span class="line">                fn.apply(context, arg);</span><br><span class="line">            &#125;, remaining);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="underscore实现版本"><a href="#underscore实现版本" class="headerlink" title="underscore实现版本"></a>underscore实现版本</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">／**</span><br><span class="line">* @ func 回调函数 </span><br><span class="line">* @ wait 间隔时间 </span><br><span class="line">* @ options options.leading = <span class="literal">true</span> 表示首次立即执行 options.leading = <span class="literal">false</span> 表示首次不立即执行 ；</span><br><span class="line">* @     options.trailing = <span class="literal">true</span> 表示最后一次执行 options.trailing = <span class="literal">false</span> 表示最后一次不执行 </span><br><span class="line">*／</span><br><span class="line">_.throttle = <span class="function"><span class="keyword">function</span>(<span class="params">func, wait, options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> context, args, result;</span><br><span class="line">    <span class="keyword">var</span> timeout = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> previous = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (!options) options = &#123;&#125;;</span><br><span class="line">    <span class="keyword">var</span> later = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        previous = options.leading === <span class="literal">false</span> ? <span class="number">0</span> : _.now();</span><br><span class="line">        timeout = <span class="literal">null</span>;</span><br><span class="line">        result = func.apply(context, args);</span><br><span class="line">        <span class="keyword">if</span> (!timeout) context = args = <span class="literal">null</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> now = _.now();</span><br><span class="line">        <span class="keyword">if</span> (!previous &amp;&amp; options.leading === <span class="literal">false</span>) previous = now;</span><br><span class="line">        <span class="keyword">var</span> remaining = wait - (now - previous);</span><br><span class="line">        context = <span class="keyword">this</span>;</span><br><span class="line">        args = <span class="built_in">arguments</span>;</span><br><span class="line">        <span class="keyword">if</span> (remaining &lt;= <span class="number">0</span> || remaining &gt; wait) &#123;</span><br><span class="line">            <span class="keyword">if</span> (timeout) &#123;</span><br><span class="line">                clearTimeout(timeout);</span><br><span class="line">                timeout = <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            previous = now;</span><br><span class="line">            result = func.apply(context, args);</span><br><span class="line">            <span class="keyword">if</span> (!timeout) context = args = <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!timeout &amp;&amp; options.trailing !== <span class="literal">false</span>) &#123;</span><br><span class="line">            timeout = setTimeout(later, remaining);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>underscore 的版本有一个很好的地方就是当事件频繁触发时不用一直设置定时器和清除定时器。但是这个版本有两个问题，第一个就是当设置<code>options.leading = false</code> 和 <code>options.trailing = false</code> 首次调用时 <code>remaining = wait</code> if 和 else if 分支都不会进去，这是一个bug；第二个问题就是当设置<code>options.leading = true</code> 和 <code>options.trailing = true</code> 首次调用时 <code>previous = 0</code> now 等于一个很大的正数，<code>remaining = wait - (now - 0) &lt; 0</code> 数一个很大的负数，<code>timeout = null; !timeout = true</code> 进入 else if 分支的时候，执行<code>timeout = setTimeout(later, remaining);</code>的时候，给定时器设延迟执行，这应该</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;函数防抖（debounce&quot;&gt;&lt;a href=&quot;#函数防抖（debounce&quot; class=&quot;headerlink&quot; title=&quot;函数防抖（debounce)&quot;&gt;&lt;/a&gt;函数防抖（debounce)&lt;/h2&gt;&lt;p&gt;函数防抖是指在函数调用动作触发n秒后才开始执行，n秒内若再次触发，则重新开始计时，再次等待n秒后才开始执行。如果n秒内不断触发，那就不断重新开始计时，一直等到有一个n秒内没有触发，才开始执行此函数。&lt;/p&gt;
&lt;p&gt;根据描述，我们可以用&lt;code&gt;setTimeout&lt;/code&gt;来实现一个简单版的防抖函数&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.goyth.com/categories/JavaScript/"/>
    
    
      <category term="Debounce" scheme="http://www.goyth.com/tags/Debounce/"/>
    
      <category term="Throttle" scheme="http://www.goyth.com/tags/Throttle/"/>
    
  </entry>
  
  <entry>
    <title>基于 Docker 构建前端持续集成开发环境</title>
    <link href="http://www.goyth.com/2018/05/08/dockerDeploy/"/>
    <id>http://www.goyth.com/2018/05/08/dockerDeploy/</id>
    <published>2018-05-08T09:24:13.000Z</published>
    <updated>2018-05-08T09:35:54.892Z</updated>
    
    <content type="html"><![CDATA[<p>本文将以一个标准的 Vue 项目为例，完全抛弃传统的前端项目开发部署方式，基于 Docker 容器技术打造一个精简的前端持续集成的开发环境。</p><h4 id="前置知识："><a href="#前置知识：" class="headerlink" title="前置知识："></a>前置知识：</h4><ol><li><p>CI（持续集成）：<a href="http://www.ruanyifeng.com/blog/2015/09/continuous-integration.html" title="CI 介绍" target="_blank" rel="noopener">阮一峰老师的关于 CI 的介绍</a></p></li><li><p>Docker： <a href="http://guide.daocloud.io/dcs/docker-9152673.html" target="_blank" rel="noopener">Docker 快速入门</a></p></li></ol><h3 id="目标："><a href="#目标：" class="headerlink" title="目标："></a>目标：</h3><ol><li><p>代码无需在本地构建</p></li><li><p>只需将代码推上 Github ，自动构建 -&gt; 部署</p></li><li><p>版本易管理，可轻松回退版本</p></li></ol><a id="more"></a><h2 id="现在开始进入主题"><a href="#现在开始进入主题" class="headerlink" title="现在开始进入主题"></a>现在开始进入主题</h2><h3 id="第一步：-初始化-Vue-项目（使用vue官方脚手架-vue-cli"><a href="#第一步：-初始化-Vue-项目（使用vue官方脚手架-vue-cli" class="headerlink" title="第一步： 初始化 Vue 项目（使用vue官方脚手架 vue-cli)"></a>第一步： 初始化 Vue 项目（使用vue官方脚手架 <a href="https://github.com/vuejs/vue-cli" target="_blank" rel="noopener">vue-cli</a>)</h3><ol><li><p>初始化 vue 项目：vue init webpack vue-docker-demo</p></li><li><p>在项目根目录下编 Dockerfile<br><img src="/2018/05/08/dockerDeploy/vue-docker.png" alt="" title="vue-docker"></p></li></ol><p>Dockerfile 内容如下（如果是构建其他项目，比如 angular4，只需安装 angular-cli，将构建参数改成 ng build 即可，大同小异）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"># 使用 node 6.10.3 的精简版作为基础镜像</span><br><span class="line">FROM node:6.10.3-slim</span><br><span class="line"></span><br><span class="line"># 安装nginx</span><br><span class="line">RUN apt-get update \</span><br><span class="line">    &amp;&amp; apt-get install -y nginx</span><br><span class="line"></span><br><span class="line"># 指定工作目录</span><br><span class="line">WORKDIR /app</span><br><span class="line"></span><br><span class="line"># 将当前目录下的所有文件拷贝到工作目录下</span><br><span class="line">COPY . /app/</span><br><span class="line"></span><br><span class="line"># 声明运行时容器提供服务端口</span><br><span class="line">EXPOSE 80</span><br><span class="line"></span><br><span class="line"># 1. 安装依赖</span><br><span class="line"># 2. 运行 npm run buil</span><br><span class="line"># 3. 将 dist 目录的所有文件拷贝到 nginx 的目录下</span><br><span class="line"># 4. 删除工作目录的文件，尤其是 node_modules 以减小镜像体积</span><br><span class="line"># 由于镜像构建的每一步都会产生新层</span><br><span class="line"># 为了减小镜像体积，尽可能将一些同类操作，集成到一个步骤中，如下</span><br><span class="line">RUN npm install \</span><br><span class="line">    &amp;&amp; npm run build \</span><br><span class="line">    &amp;&amp; cp -r dist/* /var/www/html \</span><br><span class="line">    &amp;&amp; rm -rf /app</span><br><span class="line"></span><br><span class="line"># 以前台方式启动 nginx </span><br><span class="line">CMD [ &quot;nginx&quot;,&quot;-g&quot;,&quot;daemon off;&quot;]</span><br></pre></td></tr></table></figure><ol><li>初始化 git， 连接并将代码推送到 Github 仓库<br><img src="/2018/05/08/dockerDeploy/github.png" alt="" title="vue-docker-dome"></li></ol><h3 id="第二步：使用-DaoCloud-搭建-Devops-流程"><a href="#第二步：使用-DaoCloud-搭建-Devops-流程" class="headerlink" title="第二步：使用 DaoCloud 搭建 Devops 流程"></a>第二步：使用 <a href="https://dashboard.daocloud.io/" target="_blank" rel="noopener">DaoCloud</a> 搭建 Devops 流程</h3><p>（也可以使用其他公有云服务，差别不大，本文将以简单易操作并且对个人开发者免费的 DaoCloud 为例）1. 注册一个 DaoCloud 账号2. 用户中心 -&gt; 代码托管，授权可访问你的 Github 仓库</p><ol><li><p>注册一个 DaoCloud 账号</p></li><li><p>用户中心 -&gt; 代码托管，授权可访问你的 Github 仓库<br><img src="/2018/05/08/dockerDeploy/daocloud1.png" alt="" title="vue-docker-dome"></p></li><li><p>在 Devops 项目中新建一个项目，并选择 Github 中对应刚才新创建的项目，点击“开始创建”<br><img src="/2018/05/08/dockerDeploy/daocloud2.png" alt="" title="vue-docker-dome"></p></li><li><p>先手动构建一个镜像版本，便于下面用这个镜像版本创建一个应用<br><img src="/2018/05/08/dockerDeploy/daocloud3.png" alt="" title="vue-docker-dome"></p></li></ol><p><img src="/2018/05/08/dockerDeploy/daocloud4.png" alt="" title="vue-docker-dome"></p><ol><li>连接自有主机（没有自有主机的，也可以使用云端测试环境）</li></ol><p>tips：可以去购买 vultr 等主机，按照指示流程完成主机接入，大概很简单的三四步操作，注意在完成主机连接后，需要手动在主机上启动 docker（service docker start）</p><p><img src="/2018/05/08/dockerDeploy/daocloud5.png" alt="" title="vue-docker-dome"></p><p><img src="/2018/05/08/dockerDeploy/daocloud6.png" alt="" title="vue-docker-dome"></p><p>太酷了，我们已经将我们的主机接入了 DaoCloud，接下来就来完成最有意思的一步。</p><ol><li>创建一个应用</li></ol><p>进入【镜像仓库】选择刚才手动构建出来的镜像，并部署最新版本到自由主机或者云端测试环境</p><p><img src="/2018/05/08/dockerDeploy/daocloud7.png" alt="" title="vue-docker-dome"></p><p><img src="/2018/05/08/dockerDeploy/daocloud8.png" alt="" title="vue-docker-dome"></p><p>稍等片刻，便可以点击“立即部署”</p><p><img src="/2018/05/08/dockerDeploy/daocloud9.png" alt="" title="vue-docker-dome"></p><p>等待完成镜像拉取，待容器列表中的容器起来后，通过地址查看我们部署的 vue 应用</p><p><img src="/2018/05/08/dockerDeploy/daocloud10.png" alt="" title="vue-docker-dome"></p><p><img src="/2018/05/08/dockerDeploy/daocloud11.png" alt="" title="vue-docker-dome"></p><p><img src="/2018/05/08/dockerDeploy/daocloud12.png" alt="" title="vue-docker-dome"></p><p>我们已经可以访问到我们刚才部署的 vue 应用了，也表示我们已经将我们的镜像部署到我们的自有主机上去了，此时进入主机查看容器运行情况，可以看到有一个正在运行中的容器，正是我们刚刚部署的，一切都是完美的。</p><p><img src="/2018/05/08/dockerDeploy/daocloud13.png" alt="" title="vue-docker-dome"></p><p>完成到这里，我们可以说已经完成了 99% 的工作，但是还非常重要的最后 1%，那就是真正的自定义持续集成流程，让一切都自动化起来，现在让我们回到刚才 Devops 项目的【流程定义】中去</p><ol><li>定义自动构建，自动发布任务回到 Devops 项目里对自动化流程进行定义</li></ol><p><img src="/2018/05/08/dockerDeploy/daocloud14.png" alt="" title="vue-docker-dome"></p><p>首先我们来定义一下自动构建任务，我们设定规则是只有在有新 tag 时才执行构建任务，构建时查找根目录下的 Dockerfile，并以此构建镜像</p><p><img src="/2018/05/08/dockerDeploy/daocloud31.png" alt="" title="vue-docker-dome"></p><p><img src="/2018/05/08/dockerDeploy/daocloud16.png" alt="" title="vue-docker-dome"></p><p>其次，我们再来定义自动发布任务，当构建任务完成时自动触发自动发布任务，并发布到自有主机的应用上去</p><p><img src="/2018/05/08/dockerDeploy/daocloud17.png" alt="" title="vue-docker-dome"></p><p><img src="/2018/05/08/dockerDeploy/daocloud18.png" alt="" title="vue-docker-dome"></p><p><img src="/2018/05/08/dockerDeploy/daocloud19.png" alt="" title="vue-docker-dome"></p><p>至此，我们已经完成了，所有流程控制工作，去测试一下整个流程是否能走通？</p><h3 id="第三步：-测试整个流程"><a href="#第三步：-测试整个流程" class="headerlink" title="第三步： 测试整个流程"></a>第三步： 测试整个流程</h3><p>回到我们本地，修改一下文本内容，提交，并推送到远端，并且打下我们的第一个版本tag 1.1.1，并将 tag 推送到远端</p><p><img src="/2018/05/08/dockerDeploy/daocloud20.png" alt="" title="vue-docker-dome"></p><p>可以看到，与此同时，我们打 tag 的操作触发了我们定义的 CI 流程</p><p><img src="/2018/05/08/dockerDeploy/daocloud32.png" alt="" title="vue-docker-dome"><br><img src="/2018/05/08/dockerDeploy/daocloud33.png" alt="" title="vue-docker-dome"></p><p>稍等片刻，可以看到我们的应用更新了，对应的版本就是我们刚刚推上去的 1.1.1</p><p><img src="/2018/05/08/dockerDeploy/daoloud23.png" alt="" title="vue-docker-dome"></p><p>我们还可以对应用的版本进行切换，回退等操作</p><p><img src="/2018/05/08/dockerDeploy/daocloud34.png" alt="" title="vue-docker-dome"></p><p>至此，我们在只编写了一个 Dockerfile 配置文件，没有编写脚本的情况下，成功地搭建了一套前端的持续集成开发环境，之后我们只需要专心编写我们的业务代码就好了，打一个 Tag 便可以轻松地完成自动部署上线。</p><p>参考链接：<a href="https://juejin.im/post/5a142d7b6fb9a0451170c2c7" target="_blank" rel="noopener">https://juejin.im/post/5a142d7b6fb9a0451170c2c7</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文将以一个标准的 Vue 项目为例，完全抛弃传统的前端项目开发部署方式，基于 Docker 容器技术打造一个精简的前端持续集成的开发环境。&lt;/p&gt;
&lt;h4 id=&quot;前置知识：&quot;&gt;&lt;a href=&quot;#前置知识：&quot; class=&quot;headerlink&quot; title=&quot;前置知识：&quot;&gt;&lt;/a&gt;前置知识：&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;CI（持续集成）：&lt;a href=&quot;http://www.ruanyifeng.com/blog/2015/09/continuous-integration.html&quot; title=&quot;CI 介绍&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;阮一峰老师的关于 CI 的介绍&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Docker： &lt;a href=&quot;http://guide.daocloud.io/dcs/docker-9152673.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Docker 快速入门&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;目标：&quot;&gt;&lt;a href=&quot;#目标：&quot; class=&quot;headerlink&quot; title=&quot;目标：&quot;&gt;&lt;/a&gt;目标：&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;代码无需在本地构建&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;只需将代码推上 Github ，自动构建 -&amp;gt; 部署&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;版本易管理，可轻松回退版本&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://www.goyth.com/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://www.goyth.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 原型链与继承</title>
    <link href="http://www.goyth.com/2018/04/23/prototypeAndExtend/"/>
    <id>http://www.goyth.com/2018/04/23/prototypeAndExtend/</id>
    <published>2018-04-23T04:23:43.000Z</published>
    <updated>2018-05-28T06:30:48.980Z</updated>
    
    <content type="html"><![CDATA[<h3 id="原型对象"><a href="#原型对象" class="headerlink" title="原型对象"></a>原型对象</h3><p>无论什么时候，只要创建一个新函数，就会根据一组特定的规则为该函数创建一个 <code>prototype</code> 属性，这个属性指向函数的原型对象。默认情况下，所有原型对象都会自动获得一个 <code>constructor</code>（构造函数）属性，这个属性指向 <code>prototype</code> 属性所在的函数。</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">function Person()&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2018/04/23/prototypeAndExtend/Person.png" alt=""></p><p>当我们用构造函数创建一个实例时，也会为这个实例创建一个 <code>__proto__</code> 属性，这个<code>__proto__</code> 属性是一个指针指向构造函数的原型对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let person = new Person();</span><br><span class="line">person.__proto__ === Person.prototype    // true</span><br><span class="line">let person1 = new Person();</span><br><span class="line">person1.__proto__ === Person.prototype    // true</span><br></pre></td></tr></table></figure><p>由于同一个构造函数创建的所有实例对象的<code>__proto__</code> 属性都指向这个构造函数的原型对象，因此所有的实例对象都会共享构造函数的原型对象上所有的属性和方法，一旦原型对象上的属性或方法发生改变，所有的实例对象都会受到影响。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function Person()&#123;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.name = &quot;Luke&quot;;</span><br><span class="line">Person.prototype.age = 18;</span><br><span class="line">let person1 = new Person();</span><br><span class="line">let person2 = new Person();</span><br><span class="line">alert(person1.name)    // &quot;Luke&quot;</span><br><span class="line">alert(person2.name)    // &quot;Luke&quot;</span><br><span class="line">Person.prototype.name = &quot;Jack&quot;;</span><br><span class="line">alert(person1.name)    // &quot;Jack&quot;</span><br><span class="line">alert(person2.name)    // &quot;Jack&quot;</span><br></pre></td></tr></table></figure><h3 id="重写原型对象"><a href="#重写原型对象" class="headerlink" title="重写原型对象"></a>重写原型对象</h3><p>我们经常用一个包含所有属性和方法的对象字面量来重写整个原型对象，如下面的例子所示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function Person()&#123;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">    name : &quot;Luke&quot;,</span><br><span class="line">    age : 18,</span><br><span class="line">    job : &quot;Software Engineer&quot;,</span><br><span class="line">    sayName : function()&#123;</span><br><span class="line">        alert(this.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们将 <code>Person.prototype</code> 设置为一个新对象，而这个对象中没有<code>constructor</code>属性，这导致 <code>constructor</code> 属性不再指向 <code>Person</code>，而是指向 <code>Object</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let friend = new Person();</span><br><span class="line">alert(friend.constructor  === Person);    //false </span><br><span class="line">alert(friend.constructor  === Object);    //true</span><br></pre></td></tr></table></figure><p>如果 <code>constructor</code> 的值很重要，我们可以像下面这样特意将它设置回设置回适当的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function Person()&#123;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">    constructor : Person,</span><br><span class="line">    name : &quot;Luke&quot;,</span><br><span class="line">    age : 18,</span><br><span class="line">    job : &quot;Software Engineer&quot;,</span><br><span class="line">    sayName : function()&#123;</span><br><span class="line">        alert(this.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="原型链及原型链继承"><a href="#原型链及原型链继承" class="headerlink" title="原型链及原型链继承"></a>原型链及原型链继承</h3><p>每个构造函数都有一个原型对象，原型对象都包含一个指向构造函数的指针(<code>constructor</code>)，而实例都包含一个指向原型对象的内部指针(<code>__proto__</code>)。那么，假如我们让原型对象等于另一个类型的实例，结果会怎么样呢？显然，此时的原型对象将包含一个指向另一个原型的指针，相应地，另一个原型中也包含着一个指向另一个构造函数的指针。假如另一个原型又是另一个构造函数的实例，那么上述关系依然成立，如此层层递进，就构成了实例与原型的链条。这就是所谓的原型链的基本概念。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">function Super()&#123;</span><br><span class="line">    this.property = true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Super.prototype.getSuperValue = function()&#123;</span><br><span class="line">    return this.property;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function Sub()&#123;</span><br><span class="line">    this.subproperty = false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Sub.prototype = new Super();    //继承了 Super </span><br><span class="line"></span><br><span class="line">Sub.prototype.getSubValue = function ()&#123;</span><br><span class="line">    return this.subproperty;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let instance = new Sub();</span><br><span class="line">console.log(instance.getSuperValue());    //true</span><br><span class="line"></span><br><span class="line">console.log(instance.__proto__ === Sub.prototype);    //true</span><br><span class="line">console.log(Sub.prototype.__proto__ === Super.prototype);    //true</span><br></pre></td></tr></table></figure><p>上面的代码中<code>Sub.prototype = new Super();</code>通过创建Super的实例，并将该实例赋值给<code>Sub.prototype</code>来实现继承。此时存在于Super的实例和原型对象中的所有属性和方法，也都存在于Sub.prototype中。instanse的<code>__proto__</code>属性指向Sub的原型对象<code>Sub.prototype</code>，Sub原型对象的<code>__proto__</code>属性又指向Super的原型对象<code>Super.prototype</code>。</p><h4 id="原型链搜索机制"><a href="#原型链搜索机制" class="headerlink" title="原型链搜索机制"></a>原型链搜索机制</h4><p>当访问一个实例的属性时，首先会在该实例中搜索该属性。如果没有找到该属性，则会继续搜索实例的原型。在通过原型链继承的情况下，搜索过程就得以沿着原型链继续向上查找，直到找到该属性为止，或者搜索到最高级的原型链<code>Object.prototype</code>中，任然没有找到则返回<code>undefined</code>。就拿上面的例子来说，调用<code>instance.getSuperValue()</code>会经历三个搜索步骤：1）搜索实例；2）搜索Sub.prototype;3）搜索Super.prototype，最后一步才会找到该方法。在找不到属性或方法的情况下，搜索过程总是要一环一环地前行到原型链的末端才会停下。</p><h4 id="原型链问题"><a href="#原型链问题" class="headerlink" title="原型链问题"></a>原型链问题</h4><p>原型链继承最大的问题是来自包含引用类型值的原型。引用类型值的原型属性会被所有实例共享。而这正是为什么要在构造函数中，而不是原型对象中定义属性的原因。在通过原型来实现继承时，原型实际上会另一个类型的实例。于是，原先的实例属性也就顺理成章地变成了现在的原型属性了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function Super()&#123;</span><br><span class="line">    this.colors = [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;];</span><br><span class="line">&#125;</span><br><span class="line">function Sub()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">Sub.prototype = new Super();    // 继承了Super</span><br><span class="line"></span><br><span class="line">let instance1 = new Sub();</span><br><span class="line"></span><br><span class="line">instance1.colors.push(&quot;black&quot;);</span><br><span class="line">alert(instance1.colors);    //&quot;red, blue, green, black&quot;</span><br><span class="line"></span><br><span class="line">let instance2 = new Sub();</span><br><span class="line">alert(instance2.colors);    //&quot;red, blue, green, black&quot;</span><br></pre></td></tr></table></figure><p>上面的代码中，Super 构造函数定义了一个colors 属性，该属性是一个数组。Super 的每个实例都会有各自包含自己数组的colors 属性。当Sub 通过原型链继承了Super之后，Sub.prototype 就变成了Super 的一个实例，因此它也拥有了一个它自己的colors 属性。结果是所有的Sub 实例都会共享这一个colors 属性。<br>原型链的第二个问题是没有办法在不影响所有对象实例的情况下，给超类的构造函数传递参数。</p><h3 id="构造函数继承（经典继承）"><a href="#构造函数继承（经典继承）" class="headerlink" title="构造函数继承（经典继承）"></a>构造函数继承（经典继承）</h3><p>即在子类构造函数的中调用父类构造函数，此时当构建一个子类实例时，此实例也会拥有父类实例的属性和方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function Super()&#123;</span><br><span class="line">    this.colors = [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;];</span><br><span class="line">&#125;</span><br><span class="line">function Sub()&#123;</span><br><span class="line">    Super.call(this);    //继承了Super </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let instance1 = new Sub();</span><br><span class="line"></span><br><span class="line">instance1.colors.push(&quot;black&quot;);</span><br><span class="line">alert(instance1.colors);    //&quot;red, blue, green, black&quot;</span><br><span class="line"></span><br><span class="line">let instance2 = new Sub();</span><br><span class="line">alert(instance2.colors);    //&quot;red, blue, green&quot;</span><br></pre></td></tr></table></figure><p>上面的代码，当构建Sub的实例时，也会调用Super 的构造函数，这样就会在新Sub对象上执行Super()函数中定义的所有对象初始化代码。结果，Sub 的每个实例就都会具有自己的colors 属性的副本了。</p><h4 id="构造函数继承问题"><a href="#构造函数继承问题" class="headerlink" title="构造函数继承问题"></a>构造函数继承问题</h4><p>如果仅仅是借用构造函数，那么也将无法避免构造函数模式存在的问题————方法都在构造函数中定义，因此函数服用就无从谈起。而且，在超类原型中定义的方法，对子类而已也是不可见的。</p><h3 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h3><p>是指将原型链和构造函数的相结合，发挥二者之长的一种继承模式。其思路是使用原型链实现对原型属性和方法的继承，而通过借用构造函数来实现对实例属性的继承。这样，即通过在原型上定义方法实现了函数复用，又能够保证每个实例都有它自己的属性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">function Super(name)&#123;</span><br><span class="line">    this.name = name;</span><br><span class="line">    this.colors = [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Super.prototype.sayName = function ()&#123;</span><br><span class="line">    alert(this.name);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">function Sub(name, age)&#123;</span><br><span class="line">    Super.call(this);    //继承了Super 属性 (第二次调用Sup构造函数)</span><br><span class="line">    this.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Sub.prototype = new Super();    // 继承了Super 原型链上的方法 (第一次调用Sup构造函数)</span><br><span class="line">Sub.prototype.constructor = Sub;</span><br><span class="line">Sub.prototype.sayAge = function ()&#123;</span><br><span class="line">    alert(this.age);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var instance1 = new Sub(&quot;Luke&quot;, 18);</span><br><span class="line">instance1.colors.push(&quot;black&quot;);</span><br><span class="line">alert(instance1.colors);    //&quot;red, blue, green, black&quot;</span><br><span class="line">instance1.sayName();    //&quot;Luke&quot;</span><br><span class="line">instance1.sayAge()    //18</span><br><span class="line"></span><br><span class="line">var instance2 = new Sub(&quot;Jack&quot;, 20);</span><br><span class="line">alert(instance2.colors);    //&quot;red, blue, green&quot;</span><br><span class="line">instance2.sayName();    //&quot;Jack&quot;</span><br><span class="line">instance2.sayAge()    //20</span><br></pre></td></tr></table></figure><p>在上面的例子中，Sup构造函数定义了两个属性：name和colors。Sup的原型定义了一个方法sayName()。Sub构造函数在调用Sup构造函数时传入了name参数，紧接着又定义了它自己的属性age。然后，将Sup的实例赋值给Sub的原型，然后又在该新原型上定义了sayAge()方法。这样就可以让两个不同的Sub 实例即分别拥有自己的属性————包括colors 属性，又可以使用相同的方法了。<br>组合继承避免了原型链和构造函数的缺陷，融合了它们的优点，是JavaScript中最常用的继承模式。但是美中不足的是，上面的代码中调用了两次父类构造函数。Sub.prototype = new Super(); 第一次调用父类构造函数时，将Sup父类构造函数的实例赋值给了Sub子类的原型对象Sub.prototype。此时也会将父类构造函数实例上的属性赋值给子类的原型对象Sub.prototype。而第二次是在子类的构造函数中调用父类的构造函数 Super.call(this)，此时会将父类构造函数实例上的属性赋值给子类的构造函数的实例。根据原型链搜索原则，实例上的属性会屏蔽原型链上的属性。因此我们没有必要将父类构造函数实例的属性赋值给子类的原型对象，这是浪费资源而又没有意义的行为。</p><h3 id="优化后的组合继承"><a href="#优化后的组合继承" class="headerlink" title="优化后的组合继承"></a>优化后的组合继承</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">function Super(name)&#123;</span><br><span class="line">    this.name = name;</span><br><span class="line">    this.colors = [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Super.prototype.sayName = function ()&#123;</span><br><span class="line">    alert(this.name);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">function Sub(name, age)&#123;</span><br><span class="line">    Super.call(this);    //继承了Super 属性</span><br><span class="line">    this.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function F()&#123;</span><br><span class="line">&#125;</span><br><span class="line">F.prototype = Super.prototype; </span><br><span class="line">Sub.prototype = new F();    // 继承了Super 原型链上的方法</span><br><span class="line"></span><br><span class="line">Sub.prototype.constructor = Sub;</span><br><span class="line">Sub.prototype.sayAge = function ()&#123;</span><br><span class="line">    alert(this.age);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var instance1 = new Sub(&quot;Luke&quot;, 18);</span><br><span class="line">instance1.colors.push(&quot;black&quot;);</span><br><span class="line">alert(instance1.colors);    //&quot;red, blue, green, black&quot;</span><br><span class="line">instance1.sayName();    //&quot;Luke&quot;</span><br><span class="line">instance1.sayAge()    //18</span><br><span class="line"></span><br><span class="line">var instance2 = new Sub(&quot;Jack&quot;, 20);</span><br><span class="line">alert(instance2.colors);    //&quot;red, blue, green&quot;</span><br><span class="line">instance2.sayName();    //&quot;Jack&quot;</span><br><span class="line">instance2.sayAge()    //20</span><br></pre></td></tr></table></figure><p>上面的例子通过将父类的原型对象直接赋值给一个中间构造函数的原型对象，然后将这个中间构造函数的实例赋值给子类的原型对象Sub.prototype，从而完成原型链继承。它的高效性体现在只调用了一个父类构造函数Super，并且原型链保持不变。这是最理想的继承方式。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;原型对象&quot;&gt;&lt;a href=&quot;#原型对象&quot; class=&quot;headerlink&quot; title=&quot;原型对象&quot;&gt;&lt;/a&gt;原型对象&lt;/h3&gt;&lt;p&gt;无论什么时候，只要创建一个新函数，就会根据一组特定的规则为该函数创建一个 &lt;code&gt;prototype&lt;/code&gt; 属性，这个属性指向函数的原型对象。默认情况下，所有原型对象都会自动获得一个 &lt;code&gt;constructor&lt;/code&gt;（构造函数）属性，这个属性指向 &lt;code&gt;prototype&lt;/code&gt; 属性所在的函数。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.goyth.com/categories/JavaScript/"/>
    
    
      <category term="Prototype" scheme="http://www.goyth.com/tags/Prototype/"/>
    
      <category term="Extend" scheme="http://www.goyth.com/tags/Extend/"/>
    
  </entry>
  
  <entry>
    <title>JS 的正则表达式</title>
    <link href="http://www.goyth.com/2018/04/01/JSRegExp/"/>
    <id>http://www.goyth.com/2018/04/01/JSRegExp/</id>
    <published>2018-04-01T08:22:03.000Z</published>
    <updated>2018-05-28T14:14:46.385Z</updated>
    
    <content type="html"><![CDATA[<h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><p>一种几乎可以在所有的程序设计语言里和所有的计算机平台上使用的文字处理工具。它可以用来查找特定的信息（搜索），也可以用来查找并编辑特定的信息（替换）。<br>核心是 匹配，匹配位置或者匹配字符</p><a id="more"></a><h3 id="先简单的介绍一下语法"><a href="#先简单的介绍一下语法" class="headerlink" title="先简单的介绍一下语法"></a>先简单的介绍一下语法</h3><h4 id="基本元字符"><a href="#基本元字符" class="headerlink" title="基本元字符"></a>基本元字符</h4><ol><li><code>.</code>： 匹配除了换行符之外的任何单个字符</li><li><code>\</code> ： 在非特殊字符之前的反斜杠表示下一个字符是特殊的，不能从字面上解释。例如，没有前<code>\</code>的<code>&#39;b&#39;</code>通常匹配小写<code>&#39;b&#39;</code>，无论它们出现在哪里。如果加了<code>&#39;\&#39;</code>,这个字符变成了一个特殊意义的字符，反斜杠也可以将其后的特殊字符，转义为字面量。例如，模式 <code>/a*/</code> 代表会匹配 0   a。相反，模式 <code>/a\*/</code> 将 ‘ <code>*</code> ‘ 的特殊性移除，从而可以匹配像 <code>&quot;a*&quot;</code> 这样的字符串。</li><li><code>|</code> ： 逻辑或操作符</li><li><code>[ ]</code> ：定义一个字符集合，匹配字符集合中的一个字符，在字符集合里面像 <code>.</code> ，<code>\</code>这些字符都表示其本身</li><li><code>[^ ]</code> ：对上面一个集合取非</li><li><code>-</code> ：定义一个区间，例如<code>[A-Z]</code>，其首尾字符在 ASCII 字符集里面<!-- <font style="background:#FFF5F5" color="#FC563C" >-</font>  --></li></ol><h4 id="数量元字符"><a href="#数量元字符" class="headerlink" title="数量元字符"></a>数量元字符</h4><ol><li><code>{m,n}</code> ：匹配前面一个字符至少 m 次至多 n 次重复，还有<code>{m}</code>表示匹配 m 次，<code>{m,}</code>表示至少 m 次</li><li><code>+</code> ： 匹配前面一个表达式一次或者多次，相当于 <code>{1,}</code>，记忆方式追加(+)，起码得有一次</li><li><code>*</code> ： 匹配前面一个表达式零次或者多次，相当于 <code>{0,}</code>，记忆方式乘法(*)，可以一次都没有</li><li><code>?</code> ： 单独使用匹配前面一个表达式零次或者一次，相当于 <code>{0,1}</code>，记忆方式，有吗？，有(1)或者没有(1)，如果跟在任何量词<code>*</code>, <code>+</code>, <code>?</code>, <code>{}</code> 后面的时候将会使量词变为非贪婪模式（尽量匹配少的字符），默认是使用贪婪模式。比如对 “123abc” 应用 <code>/\d+/</code> 将会返回 “123”，如果使用 <code>/\d+?/</code>,那么就只会匹配到 “1”。</li></ol><h4 id="位置元字符"><a href="#位置元字符" class="headerlink" title="位置元字符"></a>位置元字符</h4><ol><li><code>^</code> ： 单独使用匹配表达式的开始</li><li><code>\$</code> ： 匹配表达式的结束</li><li><code>\b</code> ：匹配单词边界</li><li><code>\B</code> ：匹配非单词边界</li><li><code>(?=p)</code> ：匹配 p 前面的位置</li><li><code>(?!p)</code> ：匹配不是 p 前面的位置</li></ol><h4 id="标志字符"><a href="#标志字符" class="headerlink" title="标志字符"></a>标志字符</h4><ol><li><code>g</code> : 全局搜索 记忆方式global</li><li><code>i</code> ：不区分大小写 记忆方式 ignore</li><li><code>m</code> ：多行搜索</li></ol><h3 id="在-js-中的使用"><a href="#在-js-中的使用" class="headerlink" title="在 js 中的使用"></a>在 js 中的使用</h3><h4 id="支持正则的-String-对象的方法"><a href="#支持正则的-String-对象的方法" class="headerlink" title="支持正则的 String 对象的方法"></a>支持正则的 String 对象的方法</h4><ul><li><code>search</code><br>search 接受一个正则作为参数，如果参入的参数不是正则会隐式的使用 new RegExp(obj)将其转换成一个正则，返回匹配到子串的起始位置，匹配不到返回-1</li><li><code>match</code><br>match 接受参数和上面的方法一致。返回值是依赖传入的正则是否包含 g ，如果没有 g 标识，那么 match 方法对 string 做一次匹配，如果没有找到任何匹配的文本时，match 会返回 null ，否则，会返回一个数组，数组第 0 个元素包含匹配到的文本，其余元素放的是正则捕获的文本，数组还包含两个对象，index 表示匹配文本在字符串中的位置，input 表示被解析的原始字符串。如果有 g 标识，则返回一个数组，包含每一次的匹配结果</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'For more information, see Chapter 3.4.5.1'</span>;</span><br><span class="line"> <span class="keyword">var</span> re = <span class="regexp">/see (chapter \d+(\.\d)*)/i</span>;</span><br><span class="line"> <span class="keyword">var</span> found = str.match(re);</span><br><span class="line"> <span class="built_in">console</span>.log(found);</span><br><span class="line"> <span class="comment">// (3) ["see Chapter 3.4.5.1", "Chapter 3.4.5.1", ".1", index: 22, input: "For more information, see Chapter 3.4.5.1"]</span></span><br><span class="line"> <span class="comment">// 0:"see Chapter 3.4.5.1"</span></span><br><span class="line"> <span class="comment">// 1:"Chapter 3.4.5.1"</span></span><br><span class="line"> <span class="comment">// 2:".1"</span></span><br><span class="line"> <span class="comment">// index:22</span></span><br><span class="line"> <span class="comment">// input:"For more information, see Chapter 3.4.5.1"</span></span><br><span class="line"> <span class="comment">// length:3</span></span><br><span class="line"> <span class="comment">// __proto__:Array(0)</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">// 'see Chapter 3.4.5.1' 是整个匹配。</span></span><br><span class="line"> <span class="comment">// 'Chapter 3.4.5.1' 被'(chapter \d+(\.\d)*)'捕获。</span></span><br><span class="line"> <span class="comment">// '.1' 是被'(\.\d)'捕获的最后一个值。</span></span><br><span class="line"> <span class="comment">// 'index' 属性(22) 是整个匹配从零开始的索引。</span></span><br><span class="line"> <span class="comment">// 'input' 属性是被解析的原始字符串。</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'</span>;</span><br><span class="line"><span class="keyword">var</span> regexp = <span class="regexp">/[A-E]/gi</span>;</span><br><span class="line"><span class="keyword">var</span> matches_array = str.match(regexp);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(matches_array);</span><br><span class="line"><span class="comment">// ['A', 'B', 'C', 'D', 'E', 'a', 'b', 'c', 'd', 'e']</span></span><br></pre></td></tr></table></figure><ul><li><code>replace</code><br>replace 接受两个参数，第一个是要被替换的文本，可以是正则也可以是字符串，如果是字符串的时候不会被转换成正则，而是作为检索的直接量文本。第二个是替换成的文本，可以是字符串或者函数，字符串可以使用一些特殊的变量来替代前面捕获到的子串</li></ul><table><thead><tr><th style="text-align:center">变量名</th><th style="text-align:left">代表的值</th></tr></thead><tbody><tr><td style="text-align:center">$$</td><td style="text-align:left">插入一个 “$”。</td></tr><tr><td style="text-align:center">$&amp;</td><td style="text-align:left">插入匹配的子串。</td></tr><tr><td style="text-align:center">$`</td><td style="text-align:left">插入当前匹配的子串左边的内容。</td></tr><tr><td style="text-align:center">$’</td><td style="text-align:left">插入当前匹配的子串右边的内容。</td></tr><tr><td style="text-align:center">$n</td><td style="text-align:left">假如第一个参数是 RegExp对象，并且 n 是个小于100的非负整数，那么插入第 n 个括号匹配的字符串。</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> re = <span class="regexp">/(\w+)\s(\w+)/</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"John Smith"</span>;</span><br><span class="line"><span class="keyword">var</span> newstr = str.replace(re, <span class="string">"$2, $1"</span>);</span><br><span class="line"><span class="comment">// Smith, John</span></span><br><span class="line"><span class="built_in">console</span>.log(newstr);</span><br></pre></td></tr></table></figure><p>如果是函数的话，函数入参如下，返回替换成的文本</p><table><thead><tr><th>变量名</th><th>代表的值</th></tr></thead><tbody><tr><td>match</td><td>匹配的子串。（对应于上述的<code>$&amp;</code>。）</td></tr><tr><td>p1,p2,…</td><td>假如replace()方法的第一个参数是一个RegExp 对象，则代表第n个括号匹配的字符串。（对应于上述的<code>$1</code>，<code>$2</code>等。）</td></tr><tr><td>offset</td><td>匹配到的子字符串在原字符串中的偏移量。（比如，如果原字符串是“abcd”，匹配到的子字符串是“bc”，那么这个参数将是1）</td></tr><tr><td>string</td><td>被匹配的原字符串。</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">replacer</span>(<span class="params">match, p1, p2, p3, offset, string</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// p1 is nondigits, p2 digits, and p3 non-alphanumerics</span></span><br><span class="line">  <span class="keyword">return</span> [p1, p2, p3].join(<span class="string">' - '</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> newString = <span class="string">'abc12345#$*%'</span>.replace(<span class="regexp">/([^\d]*)(\d*)([^\w]*)/</span>, replacer);</span><br><span class="line"><span class="comment">// newString   abc - 12345 - #$*%</span></span><br></pre></td></tr></table></figure><ol><li><code>split</code><br>接受两个参数，返回一个数组。第一个是用来分割字符串的字符或者正则，如果是空字符串则会将元字符串中的每个字符以数组形式返回，第二个参数可选作为限制分割多少个字符，也是返回的数组的长度限制。有一个地方需要注意，用捕获括号的时候会将匹配结果也包含在返回的数组中</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myString = <span class="string">"Hello 1 word. Sentence number 2."</span>;</span><br><span class="line"><span class="keyword">var</span> splits = myString.split(<span class="regexp">/\d/</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(splits);</span><br><span class="line"><span class="comment">// [ "Hello ", " word. Sentence number ", "." ]</span></span><br><span class="line"></span><br><span class="line">splits = myString.split(<span class="regexp">/(\d)/</span>);</span><br><span class="line"><span class="built_in">console</span>.log(splits);</span><br><span class="line"><span class="comment">// [ "Hello ", "1", " word. Sentence number ", "2", "." ]</span></span><br></pre></td></tr></table></figure><h4 id="正则对象的方法"><a href="#正则对象的方法" class="headerlink" title="正则对象的方法"></a>正则对象的方法</h4><ol><li><code>test</code><br>接受一个字符串参数，如果正则表达式与指定的字符串匹配返回 true 否则返回 false</li><li><code>exec</code><br>同样接受一个字符串为参数，返回一个数组，其中存放匹配的结果。如果未找到匹配，则返回值为 <code>null</code>。匹配时，返回值跟 <code>match</code> 方法没有 g 标识时是一样的。数组第 0 个表示与正则相匹配的文本，后面 n 个是对应的 n 个捕获的文本，最后两个是对象 <code>index</code> 和 <code>input</code>同时它会在正则实例的 <code>lastIndex</code> 属性指定的字符处开始检索字符串 string。当 <code>exec()</code> 找到了与表达式相匹配的文本时，在匹配后，它将把正则实例的 <code>lastIndex</code> 属性设置为匹配文本的最后一个字符的下一个位置。有没有 g 标识对单词执行 exec 方法是没有影响的，只是有 g 标识的时候可以反复调用 <code>exec()</code> 方法来遍历字符串中的所有匹配文本。当 <code>exec()</code> 再也找不到匹配的文本时，它将返回 <code>null</code>，并把 <code>lastIndex</code> 属性重置为 0。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> string = <span class="string">"2017.06.27"</span>;</span><br><span class="line"><span class="keyword">var</span> regex2 = <span class="regexp">/\b(\d+)\b/g</span>;</span><br><span class="line"><span class="built_in">console</span>.log( regex2.exec(string) );</span><br><span class="line"><span class="built_in">console</span>.log( regex2.lastIndex);</span><br><span class="line"><span class="built_in">console</span>.log( regex2.exec(string) );</span><br><span class="line"><span class="built_in">console</span>.log( regex2.lastIndex);</span><br><span class="line"><span class="built_in">console</span>.log( regex2.exec(string) );</span><br><span class="line"><span class="built_in">console</span>.log( regex2.lastIndex);</span><br><span class="line"><span class="built_in">console</span>.log( regex2.exec(string) );</span><br><span class="line"><span class="built_in">console</span>.log( regex2.lastIndex);</span><br><span class="line"><span class="comment">// =&gt; ["2017", "2017", index: 0, input: "2017.06.27"]</span></span><br><span class="line"><span class="comment">// =&gt; 4</span></span><br><span class="line"><span class="comment">// =&gt; ["06", "06", index: 5, input: "2017.06.27"]</span></span><br><span class="line"><span class="comment">// =&gt; 7</span></span><br><span class="line"><span class="comment">// =&gt; ["27", "27", index: 8, input: "2017.06.27"]</span></span><br><span class="line"><span class="comment">// =&gt; 10</span></span><br><span class="line"><span class="comment">// =&gt; null</span></span><br><span class="line"><span class="comment">// =&gt; 0</span></span><br></pre></td></tr></table></figure><pre><code>其中正则实例lastIndex属性，表示下一次匹配开始的位置。</code></pre><p>比如第一次匹配了“2017”，开始下标是0，共4个字符，因此这次匹配结束的位置是3，下一次开始匹配的位置是4。</p><p>从上述代码看出，在使用exec时，经常需要配合使用while循环：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> string = <span class="string">"2017.06.27"</span>;</span><br><span class="line"><span class="keyword">var</span> regex2 = <span class="regexp">/\b(\d+)\b/g</span>;</span><br><span class="line"><span class="keyword">var</span> result;</span><br><span class="line"><span class="keyword">while</span> ( result = regex2.exec(string) ) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log( result, regex2.lastIndex );</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// =&gt; ["2017", "2017", index: 0, input: "2017.06.27"] 4</span></span><br><span class="line"><span class="comment">// =&gt; ["06", "06", index: 5, input: "2017.06.27"] 7</span></span><br><span class="line"><span class="comment">// =&gt; ["27", "27", index: 8, input: "2017.06.27"] 10</span></span><br></pre></td></tr></table></figure><h4 id="正则的匹配"><a href="#正则的匹配" class="headerlink" title="正则的匹配"></a>正则的匹配</h4><h5 id="字符匹配"><a href="#字符匹配" class="headerlink" title="字符匹配"></a>字符匹配</h5><p>精确匹配就不说了，比如<code>/hello/</code>，也只能匹配字符串中的<code>&quot;hello&quot;</code>这个子串。<br>正则表达式之所以强大，是因为其能实现模糊匹配。</p><h5 id="匹配多种数量"><a href="#匹配多种数量" class="headerlink" title="匹配多种数量"></a>匹配多种数量</h5><p>用<code>{m,n}</code>来匹配多种数量，其他几种形式<code>(+*?)</code>都可以等价成这种。比如</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/ab&#123;2,5&#125;c/g</span>;</span><br><span class="line"><span class="keyword">var</span> string = <span class="string">"abc abbc abbbc abbbbc abbbbbc abbbbbbc"</span>;</span><br><span class="line"><span class="built_in">console</span>.log( string.match(regex) ); <span class="comment">// ["abbc", "abbbc", "abbbbc", "abbbbbc"]</span></span><br></pre></td></tr></table></figure><h5 id="贪婪和非贪婪"><a href="#贪婪和非贪婪" class="headerlink" title="贪婪和非贪婪"></a>贪婪和非贪婪</h5><p>默认贪婪</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/\d&#123;2,5&#125;/g</span>;</span><br><span class="line"><span class="keyword">var</span> string = <span class="string">"123 1234 12345 123456"</span>;</span><br><span class="line"><span class="built_in">console</span>.log( string.match(regex) ); <span class="comment">// ["123", "1234", "12345", "12345"]</span></span><br></pre></td></tr></table></figure><p>两次后面加一个 ？ 就可以表示非贪婪，非贪婪时</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/\d&#123;2,5&#125;?/g</span>;</span><br><span class="line"><span class="keyword">var</span> string = <span class="string">"123 1234 12345 123456"</span>;</span><br><span class="line"><span class="built_in">console</span>.log( string.match(regex) ); <span class="comment">// ["12", "12", "34", "12", "34", "12", "34", "56"]</span></span><br></pre></td></tr></table></figure><h5 id="匹配多种情况"><a href="#匹配多种情况" class="headerlink" title="匹配多种情况"></a>匹配多种情况</h5><p>用字符组<code>[]</code>来匹配多种情况，其他几种形式<code>(\d\D\s\S\w\W)</code>都可以等价成这种。比如<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/a[123]b/g</span>;</span><br><span class="line"><span class="keyword">var</span> string = <span class="string">"a0b a1b a2b a3b a4b"</span>;</span><br><span class="line"><span class="built_in">console</span>.log( string.match(regex) ); <span class="comment">// ["a1b", "a2b", "a3b"]</span></span><br></pre></td></tr></table></figure></p><p>如果字符组里面字符特别多的话可以用<code>-</code>来表示范围，比如<code>[123456abcdefGHIJKLM]</code>，可以写成<code>[1-6a-fG-M]</code>，用[<code>^0-9]</code>表示非除了数字以外的字符<br>多种情况还可以是多种分支，用管道符来连接<code>|</code>，比如</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/good|goodbye/g</span>;</span><br><span class="line"><span class="keyword">var</span> string = <span class="string">"goodbye"</span>;</span><br><span class="line"><span class="built_in">console</span>.log( string.match(regex) ); <span class="comment">// ["good"]</span></span><br></pre></td></tr></table></figure><p>这个例子可以看出分支结构也是惰性的，匹配到了就不再往后尝试了。</p><h6 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h6><p>掌握这两种方式就可以解决比较简单的正则问题了。</p><ol><li>最多保留2位小数的数字<br><code>/^([1-9]\d*|0)(\.\d{1,2})?$/</code></li><li>电话号码<br><code>/(\+86)?1\d{10}/</code></li><li>身份证<br><code>/^(\d{15}|\d{17}([xX]|\d))$/</code></li></ol><h4 id="位置匹配"><a href="#位置匹配" class="headerlink" title="位置匹配"></a>位置匹配</h4><h5 id="什么是位置"><a href="#什么是位置" class="headerlink" title="什么是位置"></a>什么是位置</h5><p>位置是相邻字符之间的，比如，有一个字符串 <code>hello</code> ，这个字符串一共有6个位置 <code>*h*e*l*l*o*</code> ， <code>*</code>代表位置</p><p><img src="/2018/04/01/JSRegExp/regwz" alt="" title="位置"></p><p>上面说到了 6 种位置元字符</p><ol><li><code>^</code>，<code>$</code> 匹配字符的开头和结尾，比如<code>/^hello$/</code> 匹配一个字符串，要符合这样的条件，字符串开头的位置，紧接着是 <code>h</code> 然后是 <code>e</code>,<code>l</code>,<code>l</code>,<code>o</code> 最后是字符串结尾的位置位置还可以被替换成字符串，比如<code>&#39;hello&#39;.replace(/^|$/g, &#39;#&#39;)</code> 结果是 <code>#hello#</code></li><li><code>/b</code>，<code>/B</code> 匹配单词边界和非单词边界，单词边界具体指 <code>\w([a-zA-Z0-9_])</code> 和 <code>\W</code> 之间的位置，包括 <code>\w</code> 和 <code>^</code> 以及 <code>$</code> 之间的位置，比如<code>&#39;hello word [js]_reg.exp-01&#39;.replace(/\b/g, &#39;#&#39;)</code> 结果是<code>#hello# #word# [#js#]#_reg#.#exp#-#01#</code></li><li><code>(?=p)</code>，<code>(?!p)</code> 匹配 <code>p</code> 前面的位置和不是 <code>p</code> 前面位置，比如<code>&#39;hello&#39;.replace(/(?=l)/g, &#39;#&#39;)</code> 结果是 <code>he#l#lo&#39;hello&#39;.replace(/(?!l)/g, &#39;#&#39;)</code> 结果是 <code>#h#ell#o#</code></li></ol><h5 id="位置的特性"><a href="#位置的特性" class="headerlink" title="位置的特性"></a>位置的特性</h5><p>字符与字符之间的位置可以是多个。在理解上可以将位置理解成空字符串 <code>&#39;&#39;</code>，比如<code>hello</code> 可以是一般的 <code>&#39;&#39; + &#39;h&#39; + &#39;e&#39; + &#39;l&#39; + &#39;l&#39; + &#39;o&#39; + &#39;&#39;</code>，也可以是 <code>&#39;&#39; + &#39;&#39; + &#39;&#39; + &#39;&#39; + &#39;h&#39; + &#39;e&#39; + &#39;l&#39; + &#39;l&#39; + &#39;o&#39; + &#39;&#39;</code>，所以<code>/^h\Be\Bl\Bl\Bo$/.test(&#39;hello&#39;)</code> 结果是 <code>true</code>，<code>/^^^h\B\B\Be\Bl\Bl\Bo$$$/.test(&#39;hello&#39;)</code> 结果也是 <code>true</code></p><h5 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h5><p>-. 千分位，将 <code>123123123</code> 转换成 <code>123,123,123</code>数字是从后往前数，也就是以一个或者多个3位数字结尾的位置换成 <code>&#39;,&#39;</code> 就好了，写成正则就是<code>123123213.replace(/(?=(\d{3})+$)/g, &#39;,&#39;)</code> 但是这样的话会在最前面也加一个 <code>&#39;,&#39;</code> 这明显是不对的。所以还得继续改一下正则要求匹配到的位置不是开头，可以用 <code>/(?!^)(?=(\d{3})+$)/g</code> 来表示。换种思路来想，能不能是以数字开头然后加上上面的条件呢，得出这个正则 <code>/\d(?=(\d{3})+$)/g</code>，但是这个正则匹配的结果是 <code>12,12,123</code>，发现这个正则匹配的不是位置而是字符，将数字换成了 <code>&#39;,&#39;</code>  可以得出结论，如果要求一个正则是匹配位置的话，那么所有的条件必须都是位置。</p><h4 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h4><p>分组主要是括号的使用</p><h5 id="分组和分支结构"><a href="#分组和分支结构" class="headerlink" title="分组和分支结构"></a>分组和分支结构</h5><p>在分支结构中，括号是用来表示一个整体的，(p1|p2)，比如要匹配下面的字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">I love JavaScript</span><br><span class="line">I love Regular Expression</span><br></pre></td></tr></table></figure><p>可以用正则<code>/^I love (JavaScript|Regular Expression)$/</code> 而不是 <code>/^I love JavaScript|Regular Expression$/</code>表示一个整体还比如 <code>/(abc)+/</code> 一个或者多个 <code>abc</code> 字符串上面这些使用 <code>()</code> 包起来的地方就叫做分组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'I love JavaScript'</span>.match(<span class="regexp">/^I love (JavaScript|Regular Expression)$/</span>)</span><br><span class="line"><span class="comment">// ["I love JavaScript", "JavaScript", index: 0, input: "I love JavaScript"]</span></span><br></pre></td></tr></table></figure><p>输出的数组第二个元素，”JavaScript” 就是分组匹配到的内容</p><h4 id="引用分组"><a href="#引用分组" class="headerlink" title="引用分组"></a>引用分组</h4><h5 id="提取数据"><a href="#提取数据" class="headerlink" title="提取数据"></a>提取数据</h5><p>比如我们要用正则来匹配一个日期格式，yyyy-mm-dd，可以写出简单的正则<code>/\d{4}-\d{2}-\d{2}/</code>，这个正则还可以改成分组形式的<code>/(\d{4})-(\d{2})-(\d{2})/</code>这样我们可以分别提取出一个日期的年月日，用 <code>String</code> 的 <code>match</code> 方法或者用正则的 <code>exec</code> 方法都可以<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)/</span>;</span><br><span class="line"><span class="keyword">var</span> string = <span class="string">"2017-08-09"</span>;</span><br><span class="line"><span class="built_in">console</span>.log( string.match(regex) ); </span><br><span class="line"><span class="comment">// =&gt; ["2017-08-09", "2017", "08", "09", index: 0, input: "2017-08-09"]</span></span><br></pre></td></tr></table></figure></p><p>也可以用正则对象构造函数的全局属性 $1 - $9 来获取</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)/</span>;</span><br><span class="line"><span class="keyword">var</span> string = <span class="string">"2017-08-09"</span>;</span><br><span class="line"></span><br><span class="line">regex.test(string); <span class="comment">// 正则操作即可，例如</span></span><br><span class="line"><span class="comment">//regex.exec(string);</span></span><br><span class="line"><span class="comment">//string.match(regex);</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">1</span>); <span class="comment">// "2017"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">2</span>); <span class="comment">// "08"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">3</span>); <span class="comment">// "09"</span></span><br></pre></td></tr></table></figure><h5 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h5><p>如果想要把 yyyy-mm-dd 替换成格式 mm/dd/yyyy 应该怎么做。<br>String 的 replace 方法在第二个参数里面可以用 $1 - $9 来指代相应的分组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)/</span>;</span><br><span class="line"><span class="keyword">var</span> string = <span class="string">"2017-08-09"</span>;</span><br><span class="line"><span class="keyword">var</span> result = string.replace(regex, <span class="string">"$2/$3/$1"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// "08/09/2017"</span></span><br><span class="line">等价</span><br><span class="line"><span class="keyword">var</span> result = string.replace(regex, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">RegExp</span>.$<span class="number">2</span> + <span class="string">"/"</span> + <span class="built_in">RegExp</span>.$<span class="number">3</span> + <span class="string">"/"</span> + <span class="built_in">RegExp</span>.$<span class="number">1</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// "08/09/2017"</span></span><br><span class="line">等价</span><br><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)/</span>;</span><br><span class="line"><span class="keyword">var</span> string = <span class="string">"2017-08-09"</span>;</span><br><span class="line"><span class="keyword">var</span> result = string.replace(regex, <span class="function"><span class="keyword">function</span>(<span class="params">match, year, month, day</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> month + <span class="string">"/"</span> + day + <span class="string">"/"</span> + year;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// "08/09/2017"</span></span><br></pre></td></tr></table></figure><h5 id="反向引用"><a href="#反向引用" class="headerlink" title="反向引用"></a>反向引用</h5><p>之前匹配日期的正则在使用的时候发现还有另外两种写法，一共三种<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2017</span><span class="number">-08</span><span class="number">-09</span></span><br><span class="line"></span><br><span class="line"><span class="number">2017</span>/<span class="number">08</span>/<span class="number">09</span></span><br><span class="line"></span><br><span class="line"><span class="number">2017.08</span><span class="number">.09</span></span><br></pre></td></tr></table></figure></p><p>要匹配这三种应该怎么写正则，第一反应肯定是把上面那个正则改一下<code>/(\d{4})[-/.](\d{2})[-/.](\d{2})/</code>，把 <code>-</code> 改成 <code>[-/.]</code> 这三种都可以看上去没问题，我们多想想就会发现，这个正则把 <code>2017-08.09</code> 这种字符串也匹配到了，这个肯定是不符合预期的。这个时候我们就需要用到反向引用了，反向引用可以在匹配阶段捕获到分组的内容 <code>/(\d{4})([-/.])(\d{2})\2(\d{2})/</code></p><p><strong><em>那么出现括号嵌套怎么办，比如</em></strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/^((\d)(\d(\d)))\1\2\3\4$/</span>;</span><br><span class="line"><span class="keyword">var</span> string = <span class="string">"1231231233"</span>;</span><br><span class="line"><span class="built_in">console</span>.log( regex.test(string) ); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="built_in">RegExp</span>.$<span class="number">1</span> ); <span class="comment">// 123</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="built_in">RegExp</span>.$<span class="number">2</span> ); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="built_in">RegExp</span>.$<span class="number">3</span> ); <span class="comment">// 23</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="built_in">RegExp</span>.$<span class="number">4</span> ); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure></p><p>嵌套的括号以左括号为准</p><h5 id="引用了不存在的分组呢"><a href="#引用了不存在的分组呢" class="headerlink" title="引用了不存在的分组呢"></a>引用了不存在的分组呢</h5><p>如果在正则里面引用了前面不存在的分组，这个时候正则会匹配字符本身，比如<code>\1</code>就匹配<code>\1</code></p><h4 id="非捕获分组"><a href="#非捕获分组" class="headerlink" title="非捕获分组"></a>非捕获分组</h4><p>我们有时候只是想用括号原本的功能而不想捕获他们。这个时候可以用(?:p)表示一个非捕获分组</p><h6 id="例子-2"><a href="#例子-2" class="headerlink" title="例子"></a>例子</h6><ol><li><p>驼峰改短横</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dash</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> str.replace(<span class="regexp">/([A-Z])/g</span>, <span class="string">'-$1'</span>).toLowerCase();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>获取链接的 search 值链接：<code>https://www.baidu.com?name=jawil&amp;age=23</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getParamName</span>(<span class="params">attr</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> match = <span class="built_in">RegExp</span>(<span class="string">`[?&amp;]<span class="subst">$&#123;attr&#125;</span>=([^&amp;]*)`</span>) <span class="comment">//分组运算符是为了把结果存到exec函数返回的结果里</span></span><br><span class="line"> .exec(<span class="built_in">window</span>.location.search)</span><br><span class="line"><span class="comment">//["?name=jawil", "jawil", index: 0, input: "?name=jawil&amp;age=23"]</span></span><br><span class="line"><span class="keyword">return</span> match &amp;&amp; <span class="built_in">decodeURIComponent</span>(match[<span class="number">1</span>].replace(<span class="regexp">/\+/g</span>, <span class="string">' '</span>)) <span class="comment">// url中+号表示空格,要替换掉</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(getParamName(<span class="string">'name'</span>))  <span class="comment">// "jawil"</span></span><br></pre></td></tr></table></figure></li><li><p>去掉字符串前后的空格</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trim</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> str.replace(<span class="regexp">/(^\s*)|(\s*$)/g</span>, <span class="string">""</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>判断一个数是否是质数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPrime</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> !<span class="regexp">/^1?$|^(11+?)\1+$/</span>.test(<span class="built_in">Array</span>(num+<span class="number">1</span>).join(<span class="string">'1'</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>这里首先是把一个数字变成1组成的字符串，比如11就是 ‘1111111111’ 11个1  然后正则分两部分，第一部分是匹配空字符串或者1,第二部分是先匹配两个或者多个1，非贪婪模式，那么先会匹配两个1，然后将匹配的两个1分组，后面就是匹配一个或者多个’2个1’，就相当于整除2，如果匹配成功就证明不是质数，如果不成功就会匹配3个1，然后匹配多个3个1，相当于整除3，这样一直下去会一直整除到自己本身。如果还是不行就证明这个数字是质数。</p><h4 id="回溯"><a href="#回溯" class="headerlink" title="回溯"></a>回溯</h4><h5 id="正则是怎么匹配的"><a href="#正则是怎么匹配的" class="headerlink" title="正则是怎么匹配的"></a>正则是怎么匹配的</h5><p>有这么一个字符串 <code>&#39;abbbc&#39;</code> 和这么一个正则 <code>/ab{1,3}bbc//ab{1,3}bbc/.test(&#39;abbbc&#39;)</code> 我们一眼可以看出来是 true，但是 JavaScript 是怎么匹配的呢<br><img src="/2018/04/01/JSRegExp/huisu" alt="回溯" title="回溯"></p><h5 id="回溯-1"><a href="#回溯-1" class="headerlink" title="回溯"></a>回溯</h5><p>例如我们上面的例子，回溯的思想是，从问题的某一种状态（初始状态）出发，搜索从这种状态出发所能达到的所有“状态”，当一条路走到“尽头”的时候（不能再前进），再后退一步或若干步，从另一种可能“状态”出发，继续搜索，直到所有的“路径”（状态）都试探过。这种不断“前进”、不断“回溯”寻找解的方法，就称作“回溯法”<br>贪婪和非贪婪的匹配都会产生回溯，不同的是贪婪的是先尽量多的匹配，如果不行就吐出一个然后继续匹配，再不行就再吐出一个，非贪婪的是先尽量少的匹配。如果不行就再多匹配一个，再不行就再来一个分支结构也会产生回溯，比如<code>/^(test|te)sts$/.test(&#39;tests&#39;)</code>前面括号里面的匹配过程是先匹配到 test 然后继续往后匹配匹配到字符 <code>s</code> 的时候还是成功的，匹配到 <code>st</code> 的时候发现不能匹配， 所以会回到前面的分支结构的其他分支继续匹配，如果不行的话再换其他分支。</p><h5 id="读正则"><a href="#读正则" class="headerlink" title="读正则"></a>读正则</h5><p>读懂其他人写的正则也是一个很重要的方面。</p><h5 id="结构和操作符"><a href="#结构和操作符" class="headerlink" title="结构和操作符"></a>结构和操作符</h5><p>结构：<code>字符字面量、字符组、量词、锚字符、分组、选择分支、反向引用</code>。</p><p>操作符：</p><ol><li>转义符 <code>\</code></li><li>括号和方括号 <code>(...)</code>、<code>(?:...)</code>、<code>(?=...)</code>、<code>(?!...)</code>、<code>[...]</code></li><li>量词限定符 <code>{m}</code>、<code>{m,n}</code>、<code>{m,}</code>、<code>?</code>、<code>*</code>、<code>+</code></li><li>位置和序列 <code>^</code> 、<code>$</code>、 <code>\</code>元字符、 一般字符</li><li>管道符（竖杠） <code>|</code></li></ol><p>操作符的优先级是从上到下，由高到低的，所以在分析正则的时候可以根据优先级来拆分正则，比如<br><code>/ab?(c|de*)+|fg/</code></p><ol><li>因为括号是一个整体，所以<code>/ab?()+|fg/</code>,括号里面具体是什么可以放到后面再分析</li><li>根据量词和管道符的优先级，所以<code>a</code>, <code>b?</code>, ()+和管道符后面的<code>f</code>,<code>g</code></li><li>同理分析括号里面的<code>c|de* =&gt; c</code>和<code>d</code>, <code>e*</code></li><li>综上，这个正则描述的是</li></ol><p><img src="/2018/04/01/JSRegExp/reglc" alt=""></p><p>以这种模式来分析，再复杂的正则都可以看懂。有一个可视化的<a href="https://jex.im/regulex/" target="_blank" rel="noopener">正则分析网站</a></p><p><em>转载自<a href="https://juejin.im/post/59b5e50f51882519777c4815" target="_blank" rel="noopener">网易考拉前端团队</a></em></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;正则表达式&quot;&gt;&lt;a href=&quot;#正则表达式&quot; class=&quot;headerlink&quot; title=&quot;正则表达式&quot;&gt;&lt;/a&gt;正则表达式&lt;/h3&gt;&lt;p&gt;一种几乎可以在所有的程序设计语言里和所有的计算机平台上使用的文字处理工具。它可以用来查找特定的信息（搜索），也可以用来查找并编辑特定的信息（替换）。&lt;br&gt;核心是 匹配，匹配位置或者匹配字符&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.goyth.com/categories/JavaScript/"/>
    
    
      <category term="RegExp" scheme="http://www.goyth.com/tags/RegExp/"/>
    
  </entry>
  
  <entry>
    <title>排序算法之堆排序</title>
    <link href="http://www.goyth.com/2018/02/09/heapSort/"/>
    <id>http://www.goyth.com/2018/02/09/heapSort/</id>
    <published>2018-02-09T14:06:52.000Z</published>
    <updated>2018-05-28T14:08:58.928Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="Algorithm" scheme="http://www.goyth.com/categories/Algorithm/"/>
    
    
      <category term="Sort" scheme="http://www.goyth.com/tags/Sort/"/>
    
  </entry>
  
  <entry>
    <title>排序算法之希尔排序</title>
    <link href="http://www.goyth.com/2018/02/08/shellSort/"/>
    <id>http://www.goyth.com/2018/02/08/shellSort/</id>
    <published>2018-02-08T08:19:32.000Z</published>
    <updated>2018-05-28T14:16:45.546Z</updated>
    
    <content type="html"><![CDATA[<p>常见的内部排序算法有：冒泡排序、选择排序、插入排序、希尔排序、归并排序、快速排序、堆排序、基数排序等。这里主要介绍希尔排序</p><p>排序算法总览：</p><p><img src="/2018/02/08/shellSort/sort.png" alt=""></p><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><p><img src="/2018/02/08/shellSort/shellSort.jpeg" alt=""></p><p>希尔排序(Shell’s Sort)也称递减增量排序算法，是插入排序的一种更高效的改进版本。但希尔排序是非稳定排序算法。<br>希尔排序是基于插入排序的以下两点性质而提出改进方法的：</p><ul><li>插入排序在对几乎已经排好序的数据操作时，效率高，即可以达到线性排序的效率；</li><li>但插入排序一般来说是低效的，因为插入排序每次只能将数据移动一位；</li></ul><p>希尔排序的基本思想是：先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录基本有序时，再对全体记录进行依次直接插入排序。</p><a id="more"></a><h2 id="插入排序算法回顾"><a href="#插入排序算法回顾" class="headerlink" title="插入排序算法回顾"></a>插入排序算法回顾</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertSort</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> len = arr.length;</span><br><span class="line">  <span class="keyword">var</span> temp;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>; i&lt;len<span class="number">-1</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(arr[i<span class="number">-1</span>] &gt; arr[i])&#123;</span><br><span class="line">      temp = arr[i];</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">var</span> j = i<span class="number">-1</span>; j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; temp; j--)&#123;</span><br><span class="line">        arr[j+<span class="number">1</span>] = arr[j];</span><br><span class="line">      &#125;</span><br><span class="line">      arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="希尔排序算法实现"><a href="#希尔排序算法实现" class="headerlink" title="希尔排序算法实现"></a>希尔排序算法实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shellSort</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> len = arr.length;</span><br><span class="line">  <span class="keyword">var</span> temp;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> gap = <span class="built_in">Math</span>.floor(len/<span class="number">2</span>); gap &gt; <span class="number">0</span>; gap = <span class="built_in">Math</span>.floor(gap/<span class="number">2</span>))&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=gap; i&lt;len; i++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(arr[i-gap] &gt; arr[i])&#123;</span><br><span class="line">        temp = arr[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> j = i-gap; j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; temp; j -= gap)&#123;</span><br><span class="line">          arr[j+gap] = arr[j];</span><br><span class="line">        &#125;</span><br><span class="line">        arr[j+gap] = temp;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">8</span>];</span><br><span class="line"><span class="keyword">var</span> arrSorted = shellSort(arr);</span><br><span class="line"><span class="built_in">console</span>.log(arrSorted);</span><br><span class="line"><span class="comment">// 控制台将输出：[1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;常见的内部排序算法有：冒泡排序、选择排序、插入排序、希尔排序、归并排序、快速排序、堆排序、基数排序等。这里主要介绍希尔排序&lt;/p&gt;
&lt;p&gt;排序算法总览：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2018/02/08/shellSort/sort.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;希尔排序&quot;&gt;&lt;a href=&quot;#希尔排序&quot; class=&quot;headerlink&quot; title=&quot;希尔排序&quot;&gt;&lt;/a&gt;希尔排序&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/2018/02/08/shellSort/shellSort.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;希尔排序(Shell’s Sort)也称递减增量排序算法，是插入排序的一种更高效的改进版本。但希尔排序是非稳定排序算法。&lt;br&gt;希尔排序是基于插入排序的以下两点性质而提出改进方法的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;插入排序在对几乎已经排好序的数据操作时，效率高，即可以达到线性排序的效率；&lt;/li&gt;
&lt;li&gt;但插入排序一般来说是低效的，因为插入排序每次只能将数据移动一位；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;希尔排序的基本思想是：先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录基本有序时，再对全体记录进行依次直接插入排序。&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="http://www.goyth.com/categories/Algorithm/"/>
    
    
      <category term="Sort" scheme="http://www.goyth.com/tags/Sort/"/>
    
  </entry>
  
  <entry>
    <title>排序算法之直接插入排序</title>
    <link href="http://www.goyth.com/2018/02/08/straightInsertionSort/"/>
    <id>http://www.goyth.com/2018/02/08/straightInsertionSort/</id>
    <published>2018-02-08T07:02:30.000Z</published>
    <updated>2018-05-28T14:16:53.742Z</updated>
    
    <content type="html"><![CDATA[<p>常见的内部排序算法有：冒泡排序、选择排序、插入排序、希尔排序、归并排序、快速排序、堆排序、基数排序等。这里主要介绍直接插入排序</p><p>排序算法总览：</p><p><img src="/2018/02/08/straightInsertionSort/sort.png" alt=""></p><h2 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h2><p><img src="/2018/02/08/straightInsertionSort/insertSort.png" alt=""></p><p>直接插入排序(Straight Insertion Sort)的基本思想是：把n个待排序的元素看成为一个有序表和一个无序表。开始时有序表中只包含1个元素，无序表中包含有n-1个元素，排序过程中每次从无序表中取出第一个元素，将它插入到有序表中的适当位置，使之成为新的有序表，重复n-1次可完成排序过程。</p><a id="more"></a><h2 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">straightInsertSort</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> len = arr.length;</span><br><span class="line">  <span class="keyword">var</span> temp;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>; i&lt;len; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(arr[i] &lt; arr[i<span class="number">-1</span>])&#123;</span><br><span class="line">      temp = arr[i];</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">var</span> j = i<span class="number">-1</span>; j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; temp; j--)&#123;</span><br><span class="line">        arr[j+<span class="number">1</span>] = arr[j];</span><br><span class="line">      &#125;</span><br><span class="line">      arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">8</span>];</span><br><span class="line"><span class="keyword">var</span> arrSorted = straightInsertSort(arr);</span><br><span class="line"><span class="built_in">console</span>.log(arrSorted);</span><br><span class="line"><span class="comment">// 控制台将输出：[1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;常见的内部排序算法有：冒泡排序、选择排序、插入排序、希尔排序、归并排序、快速排序、堆排序、基数排序等。这里主要介绍直接插入排序&lt;/p&gt;
&lt;p&gt;排序算法总览：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2018/02/08/straightInsertionSort/sort.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;直接插入排序&quot;&gt;&lt;a href=&quot;#直接插入排序&quot; class=&quot;headerlink&quot; title=&quot;直接插入排序&quot;&gt;&lt;/a&gt;直接插入排序&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/2018/02/08/straightInsertionSort/insertSort.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;直接插入排序(Straight Insertion Sort)的基本思想是：把n个待排序的元素看成为一个有序表和一个无序表。开始时有序表中只包含1个元素，无序表中包含有n-1个元素，排序过程中每次从无序表中取出第一个元素，将它插入到有序表中的适当位置，使之成为新的有序表，重复n-1次可完成排序过程。&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="http://www.goyth.com/categories/Algorithm/"/>
    
    
      <category term="Sort" scheme="http://www.goyth.com/tags/Sort/"/>
    
  </entry>
  
  <entry>
    <title>排序算法之选择排序</title>
    <link href="http://www.goyth.com/2018/02/08/selectionSort/"/>
    <id>http://www.goyth.com/2018/02/08/selectionSort/</id>
    <published>2018-02-08T05:03:59.000Z</published>
    <updated>2018-05-28T14:15:50.634Z</updated>
    
    <content type="html"><![CDATA[<p>常见的内部排序算法有：冒泡排序、选择排序、插入排序、希尔排序、归并排序、快速排序、堆排序、基数排序等。这里主要介绍选择排序</p><p>排序算法总览：</p><p><img src="/2018/02/08/selectionSort/sort.png" alt=""></p><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p><img src="/2018/02/08/selectionSort/selectSort.png" alt=""></p><p>选择排序（Selection sort）是一种简单直观的排序算法。它的工作原理是每一次从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完。 选择排序是不稳定的排序方法（比如序列[5， 5， 3]第一次就将第一个[5]与[3]交换，导致第一个5挪动到第二个5后面）。</p><a id="more"></a><h2 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">selectionSort</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> len = arr.length,</span><br><span class="line">      minIndex = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len<span class="number">-1</span>; i++)&#123;</span><br><span class="line">    minIndex = i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j = i + <span class="number">1</span>; j &lt; len; j++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(arr[j] &lt; arr[minIndex])&#123;</span><br><span class="line">        minIndex = j;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(minIndex != i)&#123;</span><br><span class="line">      [arr[minIndex], arr[i]] = [arr[i], arr[minIndex]]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">8</span>];</span><br><span class="line"><span class="keyword">var</span> arrSorted = selectionSort(arr);</span><br><span class="line"><span class="built_in">console</span>.log(arrSorted);</span><br><span class="line"><span class="comment">// 控制台将输出：[1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;常见的内部排序算法有：冒泡排序、选择排序、插入排序、希尔排序、归并排序、快速排序、堆排序、基数排序等。这里主要介绍选择排序&lt;/p&gt;
&lt;p&gt;排序算法总览：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2018/02/08/selectionSort/sort.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;选择排序&quot;&gt;&lt;a href=&quot;#选择排序&quot; class=&quot;headerlink&quot; title=&quot;选择排序&quot;&gt;&lt;/a&gt;选择排序&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/2018/02/08/selectionSort/selectSort.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;选择排序（Selection sort）是一种简单直观的排序算法。它的工作原理是每一次从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完。 选择排序是不稳定的排序方法（比如序列[5， 5， 3]第一次就将第一个[5]与[3]交换，导致第一个5挪动到第二个5后面）。&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="http://www.goyth.com/categories/Algorithm/"/>
    
    
      <category term="Sort" scheme="http://www.goyth.com/tags/Sort/"/>
    
  </entry>
  
  <entry>
    <title>排序算法之冒泡排序</title>
    <link href="http://www.goyth.com/2018/02/08/bubbleSort/"/>
    <id>http://www.goyth.com/2018/02/08/bubbleSort/</id>
    <published>2018-02-08T02:40:24.000Z</published>
    <updated>2018-05-28T14:12:04.433Z</updated>
    
    <content type="html"><![CDATA[<p>常见的内部排序算法有：冒泡排序、选择排序、插入排序、希尔排序、归并排序、快速排序、堆排序、基数排序等。这里主要介绍冒泡排序</p><p>排序算法总览：</p><p><img src="/2018/02/08/bubbleSort/sort.png" alt=""></p><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p><img src="/2018/02/08/bubbleSort/bubbleSort.png" alt=""></p><p>冒泡排序（Bubble Sort），是一种计算机科学领域的较简单的排序算法。<br>它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。<br>这个算法的名字由来是因为越大的元素会经由交换慢慢“浮”到数列的顶端，故名“冒泡排序”。</p><a id="more"></a><h2 id="算法原理编辑"><a href="#算法原理编辑" class="headerlink" title="算法原理编辑"></a>算法原理编辑</h2><p>冒泡排序算法的运作如下：（从前往后）<br>比较相邻的元素。如果第一个比第二个大，就交换他们两个。<br>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。<br>针对所有的元素重复以上的步骤，除了最后一个。<br>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</p><h2 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h2><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubbleSort</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = arr.length<span class="number">-1</span>; i&gt;<span class="number">0</span>; i--)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>; j&lt;i; j++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(arr[j] &gt; arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">        [arr[j], arr[j+<span class="number">1</span>]] = [arr[j+<span class="number">1</span>], arr[j]]    <span class="comment">// 利用es6解构语法进行swap</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">8</span>];</span><br><span class="line"><span class="keyword">var</span> arrSorted = bubbleSort(arr);</span><br><span class="line"><span class="built_in">console</span>.log(arrSorted);</span><br><span class="line"><span class="comment">// 控制台将输出：[1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br></pre></td></tr></table></figure><h2 id="冒泡算法优化"><a href="#冒泡算法优化" class="headerlink" title="冒泡算法优化"></a>冒泡算法优化</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubbleSort</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> flag = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i=arr.length<span class="number">-1</span>; flag &amp;&amp; i&gt;<span class="number">0</span>; i--)&#123;</span><br><span class="line">    flag = <span class="literal">false</span>;    <span class="comment">//只要flag在下一次外循环条件检测的时候值为false，就说明已经排好序，不用继续循环 </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>; j&lt;i; j++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(arr[j] &gt; arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">        flag = <span class="literal">true</span>;    <span class="comment">//如果有交换，就将标记变量赋true</span></span><br><span class="line">        [arr[j], arr[j+<span class="number">1</span>]] = [arr[j+<span class="number">1</span>], arr[j]]    <span class="comment">// 利用es6解构语法进行swap</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">8</span>];</span><br><span class="line"><span class="keyword">var</span> arrSorted = bubbleSort(arr);</span><br><span class="line"><span class="built_in">console</span>.log(arrSorted);</span><br><span class="line"><span class="comment">// 控制台将输出：[1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;常见的内部排序算法有：冒泡排序、选择排序、插入排序、希尔排序、归并排序、快速排序、堆排序、基数排序等。这里主要介绍冒泡排序&lt;/p&gt;
&lt;p&gt;排序算法总览：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2018/02/08/bubbleSort/sort.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;冒泡排序&quot;&gt;&lt;a href=&quot;#冒泡排序&quot; class=&quot;headerlink&quot; title=&quot;冒泡排序&quot;&gt;&lt;/a&gt;冒泡排序&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/2018/02/08/bubbleSort/bubbleSort.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;冒泡排序（Bubble Sort），是一种计算机科学领域的较简单的排序算法。&lt;br&gt;它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。&lt;br&gt;这个算法的名字由来是因为越大的元素会经由交换慢慢“浮”到数列的顶端，故名“冒泡排序”。&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="http://www.goyth.com/categories/Algorithm/"/>
    
    
      <category term="Sort" scheme="http://www.goyth.com/tags/Sort/"/>
    
  </entry>
  
</feed>
